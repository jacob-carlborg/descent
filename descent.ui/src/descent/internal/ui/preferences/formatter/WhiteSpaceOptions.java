/*******************************************************************************
 * Copyright (c) 2000, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/


package descent.internal.ui.preferences.formatter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import descent.core.formatter.CodeFormatter;
import descent.core.formatter.DefaultCodeFormatterConstants;

import descent.internal.ui.preferences.formatter.SnippetPreview.PreviewSnippet;

/**
 * Manage code formatter white space options on a higher level. 
 */
public final class WhiteSpaceOptions
{
	
	/**
	 * Creates the tree for the two-pane view where code elements are associated
	 * with syntax elements.
	 */
	public List<Node> createTreeByDElement(Map<String, String> workingValues)
	{	
		final InnerNode class_invariants = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_class_invariants);
		createOption(class_invariants, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CLASS_INVARIANTS, CLASS_INVARIANT_PREVIEW);
		createOption(class_invariants, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_CLASS_INVARIANTS, CLASS_INVARIANT_PREVIEW);
		
		final InnerNode function_invocation_args = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_function_invocation_args);
		createOption(function_invocation_args, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_INVOCATION, FUNCTION_CALL_PREVIEW);
		createOption(function_invocation_args, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_INVOCATION, FUNCTION_CALL_PREVIEW);
		createOption(function_invocation_args, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_INVOCATION, FUNCTION_CALL_PREVIEW);
		createOption(function_invocation_args, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_INVOCATION, FUNCTION_CALL_PREVIEW);
		createOption(function_invocation_args, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_INVOCATION_ARGUMENTS, FUNCTION_CALL_PREVIEW);
		createOption(function_invocation_args, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_INVOCATION_ARGUMENTS, FUNCTION_CALL_PREVIEW);
		
		final InnerNode conditional_expression = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_conditional_expression);
		createOption(conditional_expression, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL_EXPRESSIONS, CONDITIONAL_EXPRESSION_PREVIEW);
		createOption(conditional_expression, workingValues, FormatterMessages.WhiteSpaceOptions_after_colon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL_EXPRESSIONS, CONDITIONAL_EXPRESSION_PREVIEW);
		createOption(conditional_expression, workingValues, FormatterMessages.WhiteSpaceOptions_before_question_mark, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_MARK_IN_CONDITIONAL_EXPRESSIONS, CONDITIONAL_EXPRESSION_PREVIEW);
		createOption(conditional_expression, workingValues, FormatterMessages.WhiteSpaceOptions_after_question_mark, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_MARK_IN_CONDITIONAL_EXPRESSIONS, CONDITIONAL_EXPRESSION_PREVIEW);
		
		final InnerNode version_debug_assignment = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_version_debug_assignment);
		createOption(version_debug_assignment, workingValues, FormatterMessages.WhiteSpaceOptions_before_equals, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_VERSION_DEBUG_ASSIGNMENT, VERSION_DEBUG_PREVIEW);
		createOption(version_debug_assignment, workingValues, FormatterMessages.WhiteSpaceOptions_after_equals, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_VERSION_DEBUG_ASSIGNMENT, VERSION_DEBUG_PREVIEW);
		
		final InnerNode foreach_statement = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement);
		createOption(foreach_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOREACH_LOOPS, FOR_PREVIEW);
		createOption(foreach_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOREACH_LOOPS, FOR_PREVIEW);
		createOption(foreach_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOREACH_LOOPS, FOR_PREVIEW);
		createOption(foreach_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOREACH_STATEMENT, FOR_PREVIEW);
		createOption(foreach_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOREACH_STATEMENT, FOR_PREVIEW);
		createOption(foreach_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_slice_operator_in_foreach_range_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SLICE_OPERATOR_IN_FOREACH_RANGE_STATEMENT, FOR_PREVIEW);
		createOption(foreach_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_slice_operator_in_foreach_range_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SLICE_OPERATOR_IN_FOREACH_RANGE_STATEMENT, FOR_PREVIEW);
		createOption(foreach_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_semicolon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOREACH_STATEMENT, FOR_PREVIEW);
		createOption(foreach_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_semicolon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOREACH_STATEMENT, FOR_PREVIEW);
		
		final InnerNode qualified_names = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_qualified_names);
		createOption(qualified_names, workingValues, FormatterMessages.WhiteSpaceOptions_before_dot, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_DOT_IN_QUALIFIED_NAMES, DOT_PREVIEW);
		createOption(qualified_names, workingValues, FormatterMessages.WhiteSpaceOptions_after_dot, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_DOT_IN_QUALIFIED_NAMES, DOT_PREVIEW);
		
		final InnerNode is_expressions = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_is_expressions);
		createOption(is_expressions, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IS_EXPRESSIONS, IS_PREVIEW);
		createOption(is_expressions, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IS_EXPRESSIONS, IS_PREVIEW);
		createOption(is_expressions, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IS_EXPRESSIONS, IS_PREVIEW);
		
		final InnerNode pragma = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_pragma);
		createOption(pragma, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PRAGMAS, PRAGMA_PREVIEW);
		createOption(pragma, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PRAGMAS, PRAGMA_PREVIEW);
		createOption(pragma, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PRAGMAS, PRAGMA_PREVIEW);
		createOption(pragma, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_PRAGMAS, PRAGMA_PREVIEW);
		createOption(pragma, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_PRAGMAS, PRAGMA_PREVIEW);
		
		final InnerNode aggregate_template_params = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_aggregate_template_params);
		createOption(aggregate_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CLASS_TEMPLATE_PARAMS, AGGREGATE_PREVIEW);
		createOption(aggregate_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CLASS_TEMPLATE_PARAMS, AGGREGATE_PREVIEW);
		createOption(aggregate_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CLASS_TEMPLATE_PARAMS, AGGREGATE_PREVIEW);
		createOption(aggregate_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_CLASS_TEMPLATE_PARAMS, AGGREGATE_PREVIEW);
		createOption(aggregate_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_AGGREGATE_TEMPLATE_PARAMETERS, AGGREGATE_PREVIEW);
		createOption(aggregate_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_AGGREGATE_TEMPLATE_PARAMETERS, AGGREGATE_PREVIEW);
		
		final InnerNode dynamic_arrays = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_dynamic_arrays);
		createOption(dynamic_arrays, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_brackets, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_DYNAMIC_ARRAY_TYPE, ARRAYS_PREVIEW);
		
		final InnerNode type_dot_identifier_expression = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_type_dot_identifier_expression);
		createOption(type_dot_identifier_expression, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION, TYPE_DOT_IDENTIFIER_PREVIEW);
		createOption(type_dot_identifier_expression, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION, TYPE_DOT_IDENTIFIER_PREVIEW);
		createOption(type_dot_identifier_expression, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION, TYPE_DOT_IDENTIFIER_PREVIEW);
		createOption(type_dot_identifier_expression, workingValues, FormatterMessages.WhiteSpaceOptions_before_dot, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_DOT_IN_TYPE_DOT_IDENTIFIER_EXPRESSIONS, TYPE_DOT_IDENTIFIER_PREVIEW);
		createOption(type_dot_identifier_expression, workingValues, FormatterMessages.WhiteSpaceOptions_after_dot, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_DOT_IN_TYPE_DOT_IDENTIFIER_EXPRESSIONS, TYPE_DOT_IDENTIFIER_PREVIEW);
		
		final InnerNode mixin = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_mixin);
		createOption(mixin, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_MIXINS, MIXIN_PREVIEW);
		createOption(mixin, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_MIXINS, MIXIN_PREVIEW);
		createOption(mixin, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_MIXINS, MIXIN_PREVIEW);
		
		final InnerNode associative_array = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_associative_array);
		createOption(associative_array, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ASSOCIATIVE_ARRAYS, ARRAYS_PREVIEW);
		createOption(associative_array, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ASSOCIATIVE_ARRAYS, ARRAYS_PREVIEW);
		createOption(associative_array, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ASSOCIATIVE_ARRAYS, ARRAYS_PREVIEW);
		
		final InnerNode operators = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_operators);
		createOption(operators, workingValues, FormatterMessages.WhiteSpaceOptions_before_assignment_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR, OPERATOR_PREVIEW);
		createOption(operators, workingValues, FormatterMessages.WhiteSpaceOptions_before_prefix_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR, OPERATOR_PREVIEW);
		createOption(operators, workingValues, FormatterMessages.WhiteSpaceOptions_before_binary_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_INFIX_OPERATOR, OPERATOR_PREVIEW);
		createOption(operators, workingValues, FormatterMessages.WhiteSpaceOptions_before_postfix_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR, OPERATOR_PREVIEW);
		createOption(operators, workingValues, FormatterMessages.WhiteSpaceOptions_after_assignment_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATOR, OPERATOR_PREVIEW);
		createOption(operators, workingValues, FormatterMessages.WhiteSpaceOptions_after_prefix_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR, OPERATOR_PREVIEW);
		createOption(operators, workingValues, FormatterMessages.WhiteSpaceOptions_after_binary_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_INFIX_OPERATOR, OPERATOR_PREVIEW);
		createOption(operators, workingValues, FormatterMessages.WhiteSpaceOptions_after_postfix_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR, OPERATOR_PREVIEW);
		
		final InnerNode template_declaration = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_template_declaration);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TEMPLATE_DECLARATIONS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TEMPLATE_DECLARATIONS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TEMPLATE_DECLARATIONS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_TEMPLATE_DECLARATIONS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TEMPLATE_DECLARATION, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TEMPLATE_DECLARATION, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_elipsis_in_tuple_parameters, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELIPSIS_IN_TUPLES, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_elipsis_in_tuple_parameters, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELIPSIS_IN_TUPLES, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon_in_parameter_specialization, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_TEMPLATE_SPECIFIC_TYPE, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_colon_in_parameter_specialization, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_TEMPLATE_SPECIFIC_TYPE, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_equals_for_default_values, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_DEFAULT_TEMPLATE_ARGUMENTS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(template_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_equals_for_default_values, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_DEFAULT_TEMPLATE_ARGUMENTS, TEMPLATE_DECLARATION_PREVIEW);
		
		final InnerNode array_literal = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_array_literal);
		createOption(array_literal, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_LITERAL, ARRAY_INITIALIZER_PREVIEW);
		createOption(array_literal, workingValues, FormatterMessages.WhiteSpaceOptions_before_trailing_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TRAILING_COMMA_IN_ARRAY_INITIALIZER, ARRAY_INITIALIZER_PREVIEW);
		createOption(array_literal, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_LITERAL, ARRAY_INITIALIZER_PREVIEW);
		createOption(array_literal, workingValues, FormatterMessages.WhiteSpaceOptions_after_trailing_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_TRAILING_COMMA_IN_ARRAY_INITIALIZER, ARRAY_INITIALIZER_PREVIEW);
		createOption(array_literal, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_LITERALS, ARRAY_INITIALIZER_PREVIEW);
		createOption(array_literal, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_LITERALS, ARRAY_INITIALIZER_PREVIEW);
		createOption(array_literal, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ARRAY_INITIALIZER, ARRAY_INITIALIZER_PREVIEW);
		createOption(array_literal, workingValues, FormatterMessages.WhiteSpaceOptions_after_colon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ARRAY_INITIALIZER, ARRAY_INITIALIZER_PREVIEW);
		
		final InnerNode extern_declarations = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_extern_declarations);
		createOption(extern_declarations, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_EXTERN_DECLARATIONS, EXTERN_PREVIEW);
		createOption(extern_declarations, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_EXTERN_DECLARATIONS, EXTERN_PREVIEW);
		createOption(extern_declarations, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_EXTERN_DECLARATIONS, EXTERN_PREVIEW);
		createOption(extern_declarations, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_EXTERN_DECLARATIONS, EXTERN_PREVIEW);
		
		final InnerNode new_params = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_new_params);
		createOption(new_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(new_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(new_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(new_params, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(new_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(new_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		
		final InnerNode template_invocation = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_template_invocation);
		createOption(template_invocation, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(template_invocation, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(template_invocation, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(template_invocation, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(template_invocation, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(template_invocation, workingValues, FormatterMessages.WhiteSpaceOptions_before_exclamation_point, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EXCLAMATION_POINT_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(template_invocation, workingValues, FormatterMessages.WhiteSpaceOptions_after_exclamation_point, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EXCLAMATION_POINT_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		
		final InnerNode if_statements = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_if_statements);
		createOption(if_statements, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IF_STATEMENTS, IF_PREVIEW);
		createOption(if_statements, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IF_STATEMENTS, IF_PREVIEW);
		createOption(if_statements, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IF_STATEMENTS, IF_PREVIEW);
		
		final InnerNode function_template_params = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_function_template_params);
		createOption(function_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_TEMPLATE_ARGS, FUNCTION_DECL_PREVIEW);
		createOption(function_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_TEMPLATE_ARGS, FUNCTION_DECL_PREVIEW);
		createOption(function_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_TEMPLATE_ARGS, FUNCTION_DECL_PREVIEW);
		createOption(function_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_TEMPLATE_ARGS, FUNCTION_DECL_PREVIEW);
		createOption(function_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_TEMPLATE_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(function_template_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_TEMPLATE_PARAMETERS, FUNCTION_DECL_PREVIEW);
		
		final InnerNode casts = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_casts);
		createOption(casts, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CASTS, CAST_PREVIEW);
		createOption(casts, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CASTS, CAST_PREVIEW);
		createOption(casts, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CASTS, CAST_PREVIEW);
		createOption(casts, workingValues, FormatterMessages.WhiteSpaceOptions_after_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CASTS, CAST_PREVIEW);
		
		final InnerNode function_declaration = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_function_declaration);
		createOption(function_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_between_template_and_arg_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_TEMPLATE_AND_ARG_PARENS_IN_FUNCTION_DECLARATION, FUNCTION_DECL_PREVIEW);
		
		final InnerNode synchronized_statement = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_synchronized_statement);
		createOption(synchronized_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SYNCHRONIZED_STATEMENT, SYNCHRONIZED_PREVIEW);
		createOption(synchronized_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SYNCHRONIZED_STATEMENT, SYNCHRONIZED_PREVIEW);
		createOption(synchronized_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SYNCHRONIZED_STATEMENT, SYNCHRONIZED_PREVIEW);
		
		final InnerNode array_constructor = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_array_constructor);
		createOption(array_constructor, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_CONSTRUCTORS, ARRAY_CONSTRUCTOR_PREVIEW);
		createOption(array_constructor, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_CONSTRUCTORS, ARRAY_CONSTRUCTOR_PREVIEW);
		createOption(array_constructor, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_CONSTRUCTORS, ARRAY_CONSTRUCTOR_PREVIEW);
		
		final InnerNode traits_expression = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_traits_expression);
		createOption(traits_expression, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		createOption(traits_expression, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		createOption(traits_expression, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		createOption(traits_expression, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		createOption(traits_expression, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		
		final InnerNode statements = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_statements);
		createOption(statements, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon_in_labeled_statements, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_STATEMENT_LABELS, LABEL_PREVIEW);
		createOption(statements, workingValues, FormatterMessages.WhiteSpaceOptions_after_colon_in_labeled_statements, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_STATEMENT_LABELS, LABEL_PREVIEW);
		createOption(statements, workingValues, FormatterMessages.WhiteSpaceOptions_before_semicolon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON, SEMICOLON_PREVIEW);
		
		final InnerNode out_declaration = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_out_declaration);
		createOption(out_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_OUT_DECLARATION, FUNCTION_DECL_PREVIEW);
		createOption(out_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_OUT_DECLARATION, FUNCTION_DECL_PREVIEW);
		createOption(out_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_OUT_DECLARATION, FUNCTION_DECL_PREVIEW);
		createOption(out_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_OUT_DECLARATION, FUNCTION_DECL_PREVIEW);
		
		final InnerNode multidimensional_arrays = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_multidimensional_arrays);
		createOption(multidimensional_arrays, workingValues, FormatterMessages.WhiteSpaceOptions_between_adjacent_brackets, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_ADJACENT_BRACKETS_IN_MULTIDIMENSIONAL_ARRAYS, ARRAYS_PREVIEW);
		
		final InnerNode function_invocation = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_function_invocation);
		createOption(function_invocation, workingValues, FormatterMessages.WhiteSpaceOptions_between_template_args_and_function_args, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_TEMPLATE_ARGS_AND_FUNCTION_ARGS, FUNCTION_CALL_PREVIEW);
		createOption(function_invocation, workingValues, FormatterMessages.WhiteSpaceOptions_between_succesive_opcalls, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_SUCCESIVE_OPCALLS, OPCALL_PREVIEW);
		
		final InnerNode version_debug = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_version_debug);
		createOption(version_debug, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_VERSION_DEBUG, VERSION_DEBUG_PREVIEW);
		createOption(version_debug, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_VERSION_DEBUG, VERSION_DEBUG_PREVIEW);
		createOption(version_debug, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_VERSION_DEBUG, VERSION_DEBUG_PREVIEW);
		
		final InnerNode variable_declaration = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_variable_declaration);
		createOption(variable_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS, MULT_LOCAL_PREVIEW);
		createOption(variable_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS, MULT_LOCAL_PREVIEW);
		createOption(variable_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_equals, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_VARIABLE_INITS, MULT_LOCAL_PREVIEW);
		createOption(variable_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_equals, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_VARIABLE_INITS, MULT_LOCAL_PREVIEW);
		
		final InnerNode enums = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_enums);
		createOption(enums, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_MEMBER_LISTS, ENUM_PREVIEW);
		createOption(enums, workingValues, FormatterMessages.WhiteSpaceOptions_before_equals, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_ENUM_CONSTANTS, ENUM_PREVIEW);
		createOption(enums, workingValues, FormatterMessages.WhiteSpaceOptions_after_equals, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_ENUM_CONSTANTS, ENUM_PREVIEW);
		
		final InnerNode while_statement = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_while_statement);
		createOption(while_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WHILE_LOOPS, WHILE_PREVIEW);
		createOption(while_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WHILE_LOOPS, WHILE_PREVIEW);
		createOption(while_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WHILE_LOOPS, WHILE_PREVIEW);
		
		final InnerNode function_delegate_type = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_function_delegate_type);
		createOption(function_delegate_type, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_DELEGATE, DELEGATE_PREVIEW);
		createOption(function_delegate_type, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_DELEGATE, DELEGATE_PREVIEW);
		createOption(function_delegate_type, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_DELEGATE, DELEGATE_PREVIEW);
		createOption(function_delegate_type, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_DELEGATE, DELEGATE_PREVIEW);
		createOption(function_delegate_type, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_DELEGATES, DELEGATE_PREVIEW);
		createOption(function_delegate_type, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_DELEGATES, DELEGATE_PREVIEW);
		
		final InnerNode switch_statement = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_switch_statement);
		createOption(switch_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SWITCH_STATEMENTS, SWITCH_PREVIEW);
		createOption(switch_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SWITCH_STATEMENTS, SWITCH_PREVIEW);
		createOption(switch_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SWITCH_STATEMENTS, SWITCH_PREVIEW);
		createOption(switch_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon_in_case_default_labels, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE_DEFAULT_STATEMENT, SWITCH_PREVIEW);
		createOption(switch_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_colon_in_case_default_labels, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE_DEFAULT_STATEMENT, SWITCH_PREVIEW);
		
		final InnerNode typeof = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_typeof);
		createOption(typeof, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPEOF_STATEMENTS, TYPEOF_PREVIEW);
		createOption(typeof, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPEOF_STATEMENTS, TYPEOF_PREVIEW);
		createOption(typeof, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPEOF_STATEMENTS, TYPEOF_PREVIEW);
		
		final InnerNode struct_initalizer = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_struct_initalizer);
		createOption(struct_initalizer, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_STRUCT_INITIALIZER, STRUCT_INITIALIZER_PREVIEW);
		createOption(struct_initalizer, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_STRUCT_INITIALIZER, STRUCT_INITIALIZER_PREVIEW);
		createOption(struct_initalizer, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_STRUCT_INITIALIZER, STRUCT_INITIALIZER_PREVIEW);
		createOption(struct_initalizer, workingValues, FormatterMessages.WhiteSpaceOptions_after_colon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_STRUCT_INITIALIZER, STRUCT_INITIALIZER_PREVIEW);
		
		final InnerNode modifier_blocks = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_modifier_blocks);
		createOption(modifier_blocks, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_MODIFIERS, EXTERN_PREVIEW);
		
		final InnerNode file_import_declarations = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_file_import_declarations);
		createOption(file_import_declarations, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FILE_IMPORTS, FILE_IMPORT_PREVIEW);
		createOption(file_import_declarations, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FILE_IMPORTS, FILE_IMPORT_PREVIEW);
		createOption(file_import_declarations, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FILE_IMPORTS, FILE_IMPORT_PREVIEW);
		
		final InnerNode parenthesized_expressions = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_parenthesized_expressions);
		createOption(parenthesized_expressions, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSIONS, EXPRESSION_PREVIEW);
		createOption(parenthesized_expressions, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSIONS, EXPRESSION_PREVIEW);
		createOption(parenthesized_expressions, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHESIZED_EXPRESSIONS, EXPRESSION_PREVIEW);
		
		final InnerNode typeid = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_typeid);
		createOption(typeid, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPEID_STATEMENTS, TYPEID_PREVIEW);
		createOption(typeid, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPEID_STATEMENTS, TYPEID_PREVIEW);
		createOption(typeid, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPEID_STATEMENTS, TYPEID_PREVIEW);
		
		final InnerNode align_declaration = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_align_declaration);
		createOption(align_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ALIGN_DECLARATIONS, ALIGN_PREVIEW);
		createOption(align_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ALIGN_DECLARATIONS, ALIGN_PREVIEW);
		createOption(align_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ALIGN_DECLARATIONS, ALIGN_PREVIEW);
		
		final InnerNode static_array = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_static_array);
		createOption(static_array, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_STATIC_ARRAYS, ARRAYS_PREVIEW);
		createOption(static_array, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_STATIC_ARRAYS, ARRAYS_PREVIEW);
		createOption(static_array, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_STATIC_ARRAYS, ARRAYS_PREVIEW);
		
		final InnerNode c_style_function_pointer = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_c_style_function_pointer);
		createOption(c_style_function_pointer, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		createOption(c_style_function_pointer, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		createOption(c_style_function_pointer, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		createOption(c_style_function_pointer, workingValues, FormatterMessages.WhiteSpaceOptions_between_name_and_arg_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_NAME_AND_ARGS_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		createOption(c_style_function_pointer, workingValues, FormatterMessages.WhiteSpaceOptions_after_asterisk, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_STAR_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		
		final InnerNode scope_statement = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_scope_statement);
		createOption(scope_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SCOPE_STATEMENTS, SCOPE_PREVIEW);
		createOption(scope_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SCOPE_STATEMENTS, SCOPE_PREVIEW);
		createOption(scope_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SCOPE_STATEMENTS, SCOPE_PREVIEW);
		
		final InnerNode array_slice = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_array_slice);
		createOption(array_slice, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		createOption(array_slice, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		createOption(array_slice, workingValues, FormatterMessages.WhiteSpaceOptions_before_slice_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SLICE_OPERATOR, ARRAY_ACCESS_PREVIEW);
		createOption(array_slice, workingValues, FormatterMessages.WhiteSpaceOptions_after_slice_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SLICE_OPERATOR, ARRAY_ACCESS_PREVIEW);
		createOption(array_slice, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_brackets, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_SLICE, ARRAY_ACCESS_PREVIEW);
		createOption(array_slice, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_SLICES, ARRAY_ACCESS_PREVIEW);
		createOption(array_slice, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_SLICES, ARRAY_ACCESS_PREVIEW);
		createOption(array_slice, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_SLICES, ARRAY_ACCESS_PREVIEW);
		
		final InnerNode import_declaration = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_import_declaration);
		createOption(import_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma_in_multiple_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_IMPORTS, IMPORT_PREVIEW);
		createOption(import_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma_in_selective_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SELECTIVE_IMPORTS, IMPORT_PREVIEW);
		createOption(import_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma_in_multiple_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_IMPORTS, IMPORT_PREVIEW);
		createOption(import_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma_in_selective_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SELECTIVE_IMPORTS, IMPORT_PREVIEW);
		createOption(import_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon_in_selective_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_SELECTIVE_IMPORTS, IMPORT_PREVIEW);
		createOption(import_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_colon_in_selective_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_SELECTIVE_IMPORTS, IMPORT_PREVIEW);
		createOption(import_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_equals_in_renamed_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_RENAMED_IMPORTS, IMPORT_PREVIEW);
		createOption(import_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_equals_in_renamed_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_RENAMED_IMPORTS, IMPORT_PREVIEW);
		
		final InnerNode modified_type = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_modified_type);
		createOption(modified_type, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_MODIFIED_TYPE, CONST_PREVIEW);
		createOption(modified_type, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_MODIFIED_TYPE, CONST_PREVIEW);
		createOption(modified_type, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_MODIFIED_TYPE, CONST_PREVIEW);
		
		final InnerNode for_statement = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_for_statement);
		createOption(for_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOR_LOOPS, FOR_PREVIEW);
		createOption(for_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOR_LOOPS, FOR_PREVIEW);
		createOption(for_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOR_LOOPS, FOR_PREVIEW);
		createOption(for_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_semicolon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOR_STATEMENT, FOR_PREVIEW);
		createOption(for_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_semicolon, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR_STATEMENT, FOR_PREVIEW);
		
		final InnerNode catch_statement = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_catch_statement);
		createOption(catch_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CATCH, TRY_CATCH_FINALLY_PREVIEW);
		createOption(catch_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CATCH, TRY_CATCH_FINALLY_PREVIEW);
		createOption(catch_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CATCH, TRY_CATCH_FINALLY_PREVIEW);
		
		final InnerNode array_access = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_array_access);
		createOption(array_access, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		createOption(array_access, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		createOption(array_access, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_bracket, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		
		final InnerNode aggregate_declaration = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_aggregate_declaration);
		createOption(aggregate_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma_in_base_class_lists, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_BASE_CLASS_LISTS, AGGREGATE_PREVIEW);
		createOption(aggregate_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma_in_base_class_lists, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_BASE_CLASS_LISTS, AGGREGATE_PREVIEW);
		createOption(aggregate_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon_in_base_class_lists, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_BASE_CLASS_LISTS, AGGREGATE_PREVIEW);
		createOption(aggregate_declaration, workingValues, FormatterMessages.WhiteSpaceOptions_after_colon_in_base_class_lists, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_BASE_CLASS_LISTS, AGGREGATE_PREVIEW);
		
		final InnerNode assert_statement = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_assert_statement);
		createOption(assert_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		createOption(assert_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		createOption(assert_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		createOption(assert_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		createOption(assert_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		
		final InnerNode with_statement = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_with_statement);
		createOption(with_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WITH_STATEMENTS, WITH_PREVIEW);
		createOption(with_statement, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WITH_STATEMENTS, WITH_PREVIEW);
		createOption(with_statement, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WITH_STATEMENTS, WITH_PREVIEW);
		
		final InnerNode function_decl_params = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_function_decl_params);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_elipsis_in_varargs, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELIPSIS_IN_FUNCTION_VARARGS, FUNCTION_DECL_PREVIEW);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_elipsis_in_varargs, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELIPSIS_IN_FUNCTION_VARARGS, FUNCTION_DECL_PREVIEW);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_before_equals_for_default_values, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_DEFAULT_FUNCTION_ARGUMENTS, FUNCTION_DECL_PREVIEW);
		createOption(function_decl_params, workingValues, FormatterMessages.WhiteSpaceOptions_after_equals_for_default_values, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_DEFAULT_FUNCTION_ARGUMENTS, FUNCTION_DECL_PREVIEW);
		
		// Manually seems to be the best way to do this -- just ensure that this
		// list is updated every time a new white space option is added.
		final List<Node> roots = new ArrayList<Node>();
		final InnerNode declarations = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_declarations);
		final InnerNode expressions = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_expressions);
		final InnerNode arrays = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_arrays);
		
		// Declarations
		roots.add(declarations);
		function_declaration.setParent(declarations);
		function_template_params.setParent(function_declaration);
		function_decl_params.setParent(function_declaration);
		out_declaration.setParent(function_declaration);
		variable_declaration.setParent(declarations);
		version_debug.setParent(declarations);
		version_debug_assignment.setParent(version_debug);
		pragma.setParent(declarations);
		mixin.setParent(declarations);
		align_declaration.setParent(declarations);
		aggregate_declaration.setParent(declarations);
		aggregate_template_params.setParent(aggregate_declaration);
		class_invariants.setParent(aggregate_declaration);
		template_declaration.setParent(declarations);
		extern_declarations.setParent(declarations);
		import_declaration.setParent(declarations);
		modifier_blocks.setParent(declarations);
		enums.setParent(declarations);
		
		// Statements
		roots.add(statements);
		for_statement.setParent(statements);
		foreach_statement.setParent(statements);
		function_invocation.setParent(statements);
		function_invocation_args.setParent(function_invocation);
		new_params.setParent(function_invocation);
		while_statement.setParent(statements);
		switch_statement.setParent(statements);
		synchronized_statement.setParent(statements);
		scope_statement.setParent(statements);
		catch_statement.setParent(statements);
		assert_statement.setParent(statements);
		with_statement.setParent(statements);
		if_statements.setParent(statements);
		
		// Expressions
		roots.add(expressions);
		operators.setParent(expressions);
		qualified_names.setParent(expressions);
		function_delegate_type.setParent(expressions);
		c_style_function_pointer.setParent(function_delegate_type);
		typeof.setParent(expressions);
		typeid.setParent(expressions);
		is_expressions.setParent(expressions);
		file_import_declarations.setParent(expressions);
		casts.setParent(expressions);
		parenthesized_expressions.setParent(expressions);
		template_invocation.setParent(expressions);
		type_dot_identifier_expression.setParent(expressions);
		struct_initalizer.setParent(expressions);
		conditional_expression.setParent(expressions);
		traits_expression.setParent(expressions);
		modified_type.setParent(expressions);
		
		// Arrays
		roots.add(arrays);
		static_array.setParent(arrays);
		dynamic_arrays.setParent(arrays);
		associative_array.setParent(arrays);
		array_access.setParent(arrays);
		array_literal.setParent(arrays);
		array_slice.setParent(arrays);
		array_constructor.setParent(arrays);
		multidimensional_arrays.setParent(arrays);
		
		return roots;
	}
	
	/**
	 * Creates the tree for the one-pane view where a syntax element (colon,
	 * comma, etc.) is associated with code elements.
	 */
	public List<Node> createTreeBySyntaxElement(Map<String, String> workingValues)
	{
		final List<Node> roots = new ArrayList<Node>();
		InnerNode parent;
		
		final InnerNode after_asterisk = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_asterisk);
		createOption(after_asterisk, workingValues, FormatterMessages.WhiteSpaceOptions_c_style_function_pointer, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_STAR_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		
		final InnerNode after_closing_paren = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_closing_paren);
		createOption(after_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_casts, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CASTS, CAST_PREVIEW);
		
		final InnerNode after_colon = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_colon);
		createOption(after_colon, workingValues, FormatterMessages.WhiteSpaceOptions_base_class_lists, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_BASE_CLASS_LISTS, AGGREGATE_PREVIEW);
		createOption(after_colon, workingValues, FormatterMessages.WhiteSpaceOptions_template_parameter_sepcialization, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_TEMPLATE_SPECIFIC_TYPE, TEMPLATE_DECLARATION_PREVIEW);
		createOption(after_colon, workingValues, FormatterMessages.WhiteSpaceOptions_array_literal, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ARRAY_INITIALIZER, ARRAY_INITIALIZER_PREVIEW);
		createOption(after_colon, workingValues, FormatterMessages.WhiteSpaceOptions_struct_initalizer, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_STRUCT_INITIALIZER, STRUCT_INITIALIZER_PREVIEW);
		createOption(after_colon, workingValues, FormatterMessages.WhiteSpaceOptions_case_default_label, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE_DEFAULT_STATEMENT, SWITCH_PREVIEW);
		createOption(after_colon, workingValues, FormatterMessages.WhiteSpaceOptions_selective_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_SELECTIVE_IMPORTS, IMPORT_PREVIEW);
		createOption(after_colon, workingValues, FormatterMessages.WhiteSpaceOptions_conditional_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL_EXPRESSIONS, CONDITIONAL_EXPRESSION_PREVIEW);
		createOption(after_colon, workingValues, FormatterMessages.WhiteSpaceOptions_labels, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_STATEMENT_LABELS, LABEL_PREVIEW);
		
		final InnerNode after_comma = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_comma);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_base_class_lists, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_BASE_CLASS_LISTS, AGGREGATE_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_array_literal, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_LITERAL, ARRAY_INITIALIZER_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_function_invocation_args, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_INVOCATION_ARGUMENTS, FUNCTION_CALL_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_function_decl_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_function_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_TEMPLATE_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_aggregate_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_AGGREGATE_TEMPLATE_PARAMETERS, AGGREGATE_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOREACH_STATEMENT, FOR_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_multiple_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_IMPORTS, IMPORT_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_selective_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SELECTIVE_IMPORTS, IMPORT_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_pragma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_PRAGMAS, PRAGMA_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_struct_initalizer, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_STRUCT_INITIALIZER, STRUCT_INITIALIZER_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_template_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TEMPLATE_DECLARATION, TEMPLATE_DECLARATION_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_template_invocation, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_variable_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS, MULT_LOCAL_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_array_slice, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_function_delegate_type, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_DELEGATES, DELEGATE_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_new_params, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_trailing_comma_in_array_literal, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_TRAILING_COMMA_IN_ARRAY_INITIALIZER, ARRAY_INITIALIZER_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_assert_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		createOption(after_comma, workingValues, FormatterMessages.WhiteSpaceOptions_traits_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		
		final InnerNode after_dot = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_dot);
		createOption(after_dot, workingValues, FormatterMessages.WhiteSpaceOptions_qualified_names, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_DOT_IN_QUALIFIED_NAMES, DOT_PREVIEW);
		createOption(after_dot, workingValues, FormatterMessages.WhiteSpaceOptions_type_dot_identifier_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_DOT_IN_TYPE_DOT_IDENTIFIER_EXPRESSIONS, TYPE_DOT_IDENTIFIER_PREVIEW);
		
		final InnerNode after_elipsis = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_elipsis);
		createOption(after_elipsis, workingValues, FormatterMessages.WhiteSpaceOptions_function_varargs, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELIPSIS_IN_FUNCTION_VARARGS, FUNCTION_DECL_PREVIEW);
		createOption(after_elipsis, workingValues, FormatterMessages.WhiteSpaceOptions_tuple_parameters, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELIPSIS_IN_TUPLES, TEMPLATE_DECLARATION_PREVIEW);
		
		final InnerNode after_equals = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_equals);
		createOption(after_equals, workingValues, FormatterMessages.WhiteSpaceOptions_renamed_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_RENAMED_IMPORTS, IMPORT_PREVIEW);
		createOption(after_equals, workingValues, FormatterMessages.WhiteSpaceOptions_function_decl_params, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_DEFAULT_FUNCTION_ARGUMENTS, FUNCTION_DECL_PREVIEW);
		createOption(after_equals, workingValues, FormatterMessages.WhiteSpaceOptions_template_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_DEFAULT_TEMPLATE_ARGUMENTS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(after_equals, workingValues, FormatterMessages.WhiteSpaceOptions_version_debug_assignment, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_VERSION_DEBUG_ASSIGNMENT, VERSION_DEBUG_PREVIEW);
		createOption(after_equals, workingValues, FormatterMessages.WhiteSpaceOptions_enums, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_ENUM_CONSTANTS, ENUM_PREVIEW);
		createOption(after_equals, workingValues, FormatterMessages.WhiteSpaceOptions_variable_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EQUALS_IN_VARIABLE_INITS, MULT_LOCAL_PREVIEW);
		
		final InnerNode after_exclamation_point = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_exclamation_point);
		createOption(after_exclamation_point, workingValues, FormatterMessages.WhiteSpaceOptions_template_invocation, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EXCLAMATION_POINT_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		
		final InnerNode after_opening_bracket = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_bracket);
		createOption(after_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_access, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		createOption(after_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_slice, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_SLICES, ARRAY_ACCESS_PREVIEW);
		createOption(after_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_literal, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_LITERALS, ARRAY_INITIALIZER_PREVIEW);
		createOption(after_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_constructor, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_CONSTRUCTORS, ARRAY_CONSTRUCTOR_PREVIEW);
		createOption(after_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_associative_array, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ASSOCIATIVE_ARRAYS, ARRAYS_PREVIEW);
		createOption(after_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_static_array, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_STATIC_ARRAYS, ARRAYS_PREVIEW);
		
		final InnerNode after_opening_paren = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_opening_paren);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_decl_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_TEMPLATE_ARGS, FUNCTION_DECL_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_invocation_argument_list, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_INVOCATION, FUNCTION_CALL_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_catch_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CATCH, TRY_CATCH_FINALLY_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_for_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOR_LOOPS, FOR_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_while_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WHILE_LOOPS, WHILE_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOREACH_LOOPS, FOR_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_out_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_OUT_DECLARATION, FUNCTION_DECL_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_synchronized_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SYNCHRONIZED_STATEMENT, SYNCHRONIZED_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_switch_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SWITCH_STATEMENTS, SWITCH_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_align_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ALIGN_DECLARATIONS, ALIGN_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_aggregate_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CLASS_TEMPLATE_PARAMS, AGGREGATE_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_assert_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_version_debug, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_VERSION_DEBUG, VERSION_DEBUG_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_mixin, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_MIXINS, MIXIN_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_pragma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PRAGMAS, PRAGMA_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_scope_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SCOPE_STATEMENTS, SCOPE_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_with_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WITH_STATEMENTS, WITH_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_typeof, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPEOF_STATEMENTS, TYPEOF_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_typeid, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPEID_STATEMENTS, TYPEID_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_delegate_type, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_DELEGATE, DELEGATE_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_c_style_function_pointer, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_new_params, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_extern_declarations, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_EXTERN_DECLARATIONS, EXTERN_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_file_import_declarations, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FILE_IMPORTS, FILE_IMPORT_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_if_statements, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IF_STATEMENTS, IF_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_is_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IS_EXPRESSIONS, IS_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_casts, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CASTS, CAST_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_template_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TEMPLATE_DECLARATIONS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSIONS, EXPRESSION_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_template_invocation, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_type_dot_identifier_expression_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION, TYPE_DOT_IDENTIFIER_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_traits_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		createOption(after_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_modified_type, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_MODIFIED_TYPE, CONST_PREVIEW);
		
		final InnerNode after_operator = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_operator);
		createOption(after_operator, workingValues, FormatterMessages.WhiteSpaceOptions_assignment_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATOR, OPERATOR_PREVIEW);
		createOption(after_operator, workingValues, FormatterMessages.WhiteSpaceOptions_prefix_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR, OPERATOR_PREVIEW);
		createOption(after_operator, workingValues, FormatterMessages.WhiteSpaceOptions_binary_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_INFIX_OPERATOR, OPERATOR_PREVIEW);
		createOption(after_operator, workingValues, FormatterMessages.WhiteSpaceOptions_postfix_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR, OPERATOR_PREVIEW);
		
		final InnerNode after_question_mark = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_question_mark);
		createOption(after_question_mark, workingValues, FormatterMessages.WhiteSpaceOptions_conditional_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_MARK_IN_CONDITIONAL_EXPRESSIONS, CONDITIONAL_EXPRESSION_PREVIEW);
		
		final InnerNode after_semicolon = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_semicolon);
		createOption(after_semicolon, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOREACH_STATEMENT, FOR_PREVIEW);
		createOption(after_semicolon, workingValues, FormatterMessages.WhiteSpaceOptions_for_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR_STATEMENT, FOR_PREVIEW);
		
		final InnerNode after_slice_operator = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_after_slice_operator);
		createOption(after_slice_operator, workingValues, FormatterMessages.WhiteSpaceOptions_array_slice, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SLICE_OPERATOR, ARRAY_ACCESS_PREVIEW);
		createOption(after_slice_operator, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SLICE_OPERATOR_IN_FOREACH_RANGE_STATEMENT, FOR_PREVIEW);
		
		final InnerNode before_closing_bracket = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_bracket);
		createOption(before_closing_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_access, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		createOption(before_closing_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_slice, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_SLICES, ARRAY_ACCESS_PREVIEW);
		createOption(before_closing_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_literal, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_LITERALS, ARRAY_INITIALIZER_PREVIEW);
		createOption(before_closing_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_constructor, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_CONSTRUCTORS, ARRAY_CONSTRUCTOR_PREVIEW);
		createOption(before_closing_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_associative_array, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ASSOCIATIVE_ARRAYS, ARRAYS_PREVIEW);
		createOption(before_closing_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_static_array, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_STATIC_ARRAYS, ARRAYS_PREVIEW);
		
		final InnerNode before_closing_paren = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_closing_paren);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_decl_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_TEMPLATE_ARGS, FUNCTION_DECL_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_invocation_argument_list, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_INVOCATION, FUNCTION_CALL_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_catch_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CATCH, TRY_CATCH_FINALLY_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_for_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOR_LOOPS, FOR_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_while_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WHILE_LOOPS, WHILE_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOREACH_LOOPS, FOR_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_out_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_OUT_DECLARATION, FUNCTION_DECL_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_synchronized_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SYNCHRONIZED_STATEMENT, SYNCHRONIZED_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_switch_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SWITCH_STATEMENTS, SWITCH_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_align_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ALIGN_DECLARATIONS, ALIGN_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_aggregate_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CLASS_TEMPLATE_PARAMS, AGGREGATE_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_assert_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_version_debug, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_VERSION_DEBUG, VERSION_DEBUG_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_mixin, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_MIXINS, MIXIN_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_pragma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PRAGMAS, PRAGMA_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_scope_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SCOPE_STATEMENTS, SCOPE_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_with_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WITH_STATEMENTS, WITH_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_typeof, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPEOF_STATEMENTS, TYPEOF_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_typeid, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPEID_STATEMENTS, TYPEID_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_delegate_type, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_DELEGATE, DELEGATE_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_c_style_function_pointer, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_new_params, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_extern_declarations, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_EXTERN_DECLARATIONS, EXTERN_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_file_import_declarations, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FILE_IMPORTS, FILE_IMPORT_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_if_statements, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IF_STATEMENTS, IF_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_is_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IS_EXPRESSIONS, IS_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_casts, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CASTS, CAST_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_template_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TEMPLATE_DECLARATIONS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHESIZED_EXPRESSIONS, EXPRESSION_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_template_invocation, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_type_dot_identifier_expression_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION, TYPE_DOT_IDENTIFIER_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_traits_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		createOption(before_closing_paren, workingValues, FormatterMessages.WhiteSpaceOptions_modified_type, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_MODIFIED_TYPE, CONST_PREVIEW);
		
		final InnerNode before_colon = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_colon);
		createOption(before_colon, workingValues, FormatterMessages.WhiteSpaceOptions_base_class_lists, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_BASE_CLASS_LISTS, AGGREGATE_PREVIEW);
		createOption(before_colon, workingValues, FormatterMessages.WhiteSpaceOptions_template_parameter_sepcialization, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_TEMPLATE_SPECIFIC_TYPE, TEMPLATE_DECLARATION_PREVIEW);
		createOption(before_colon, workingValues, FormatterMessages.WhiteSpaceOptions_array_literal, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ARRAY_INITIALIZER, ARRAY_INITIALIZER_PREVIEW);
		createOption(before_colon, workingValues, FormatterMessages.WhiteSpaceOptions_struct_initalizer, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_STRUCT_INITIALIZER, STRUCT_INITIALIZER_PREVIEW);
		createOption(before_colon, workingValues, FormatterMessages.WhiteSpaceOptions_case_default_label, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE_DEFAULT_STATEMENT, SWITCH_PREVIEW);
		createOption(before_colon, workingValues, FormatterMessages.WhiteSpaceOptions_selective_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_SELECTIVE_IMPORTS, IMPORT_PREVIEW);
		createOption(before_colon, workingValues, FormatterMessages.WhiteSpaceOptions_conditional_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL_EXPRESSIONS, CONDITIONAL_EXPRESSION_PREVIEW);
		createOption(before_colon, workingValues, FormatterMessages.WhiteSpaceOptions_labels, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_STATEMENT_LABELS, LABEL_PREVIEW);
		createOption(before_colon, workingValues, FormatterMessages.WhiteSpaceOptions_modifier_blocks, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_MODIFIERS, EXTERN_PREVIEW);
		
		final InnerNode before_comma = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_comma);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_base_class_lists, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_BASE_CLASS_LISTS, AGGREGATE_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_array_literal, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_LITERAL, ARRAY_INITIALIZER_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_function_invocation_args, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_INVOCATION_ARGUMENTS, FUNCTION_CALL_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_function_decl_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_function_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_TEMPLATE_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_aggregate_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_AGGREGATE_TEMPLATE_PARAMETERS, AGGREGATE_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOREACH_STATEMENT, FOR_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_multiple_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_IMPORTS, IMPORT_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_selective_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SELECTIVE_IMPORTS, IMPORT_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_pragma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_PRAGMAS, PRAGMA_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_struct_initalizer, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_STRUCT_INITIALIZER, STRUCT_INITIALIZER_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_template_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TEMPLATE_DECLARATION, TEMPLATE_DECLARATION_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_template_invocation, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_variable_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS, MULT_LOCAL_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_array_slice, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_function_delegate_type, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_DELEGATES, DELEGATE_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_new_params, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_trailing_comma_in_array_literal, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TRAILING_COMMA_IN_ARRAY_INITIALIZER, ARRAY_INITIALIZER_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_assert_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_enums, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_MEMBER_LISTS, ENUM_PREVIEW);
		createOption(before_comma, workingValues, FormatterMessages.WhiteSpaceOptions_traits_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		
		final InnerNode before_dot = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_dot);
		createOption(before_dot, workingValues, FormatterMessages.WhiteSpaceOptions_qualified_names, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_DOT_IN_QUALIFIED_NAMES, DOT_PREVIEW);
		createOption(before_dot, workingValues, FormatterMessages.WhiteSpaceOptions_type_dot_identifier_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_DOT_IN_TYPE_DOT_IDENTIFIER_EXPRESSIONS, TYPE_DOT_IDENTIFIER_PREVIEW);
		
		final InnerNode before_elipsis = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_elipsis);
		createOption(before_elipsis, workingValues, FormatterMessages.WhiteSpaceOptions_function_varargs, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELIPSIS_IN_FUNCTION_VARARGS, FUNCTION_DECL_PREVIEW);
		createOption(before_elipsis, workingValues, FormatterMessages.WhiteSpaceOptions_tuple_parameters, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELIPSIS_IN_TUPLES, TEMPLATE_DECLARATION_PREVIEW);
		
		final InnerNode before_equals = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_equals);
		createOption(before_equals, workingValues, FormatterMessages.WhiteSpaceOptions_renamed_imports, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_RENAMED_IMPORTS, IMPORT_PREVIEW);
		createOption(before_equals, workingValues, FormatterMessages.WhiteSpaceOptions_function_decl_params, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_DEFAULT_FUNCTION_ARGUMENTS, FUNCTION_DECL_PREVIEW);
		createOption(before_equals, workingValues, FormatterMessages.WhiteSpaceOptions_template_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_DEFAULT_TEMPLATE_ARGUMENTS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(before_equals, workingValues, FormatterMessages.WhiteSpaceOptions_version_debug_assignment, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_VERSION_DEBUG_ASSIGNMENT, VERSION_DEBUG_PREVIEW);
		createOption(before_equals, workingValues, FormatterMessages.WhiteSpaceOptions_enums, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_ENUM_CONSTANTS, ENUM_PREVIEW);
		createOption(before_equals, workingValues, FormatterMessages.WhiteSpaceOptions_variable_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EQUALS_IN_VARIABLE_INITS, MULT_LOCAL_PREVIEW);
		
		final InnerNode before_exclamation_point = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_exclamation_point);
		createOption(before_exclamation_point, workingValues, FormatterMessages.WhiteSpaceOptions_template_invocation, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EXCLAMATION_POINT_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		
		final InnerNode before_opening_bracket = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_bracket);
		createOption(before_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_access, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_ACCESS, ARRAY_ACCESS_PREVIEW);
		createOption(before_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_slice, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_SLICES, ARRAY_ACCESS_PREVIEW);
		createOption(before_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_array_constructor, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_CONSTRUCTORS, ARRAY_CONSTRUCTOR_PREVIEW);
		createOption(before_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_associative_array, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ASSOCIATIVE_ARRAYS, ARRAYS_PREVIEW);
		createOption(before_opening_bracket, workingValues, FormatterMessages.WhiteSpaceOptions_static_array, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_STATIC_ARRAYS, ARRAYS_PREVIEW);
		
		final InnerNode before_opening_paren = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_opening_paren);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_decl_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_TEMPLATE_ARGS, FUNCTION_DECL_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_invocation_argument_list, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_INVOCATION, FUNCTION_CALL_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_catch_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CATCH, TRY_CATCH_FINALLY_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_for_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOR_LOOPS, FOR_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_while_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WHILE_LOOPS, WHILE_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOREACH_LOOPS, FOR_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_out_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_OUT_DECLARATION, FUNCTION_DECL_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_synchronized_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SYNCHRONIZED_STATEMENT, SYNCHRONIZED_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_switch_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SWITCH_STATEMENTS, SWITCH_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_align_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ALIGN_DECLARATIONS, ALIGN_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_aggregate_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CLASS_TEMPLATE_PARAMS, AGGREGATE_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_assert_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ASSERT_STATEMENTS, ASSERT_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_version_debug, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_VERSION_DEBUG, VERSION_DEBUG_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_mixin, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_MIXINS, MIXIN_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_pragma, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PRAGMAS, PRAGMA_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_scope_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SCOPE_STATEMENTS, SCOPE_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_with_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WITH_STATEMENTS, WITH_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_typeof, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPEOF_STATEMENTS, TYPEOF_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_typeid, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPEID_STATEMENTS, TYPEID_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_function_delegate_type, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_DELEGATE, DELEGATE_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_c_style_function_pointer, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_new_params, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_extern_declarations, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_EXTERN_DECLARATIONS, EXTERN_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_file_import_declarations, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FILE_IMPORTS, FILE_IMPORT_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_if_statements, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IF_STATEMENTS, IF_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_is_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IS_EXPRESSIONS, IS_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_casts, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CASTS, CAST_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_template_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TEMPLATE_DECLARATIONS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSIONS, EXPRESSION_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_type_dot_identifier_expression_parens, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION, TYPE_DOT_IDENTIFIER_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_class_invariants, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CLASS_INVARIANTS, CLASS_INVARIANT_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_traits_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TRAITS_EXPRESSION, TRAITS_PREVIEW);
		createOption(before_opening_paren, workingValues, FormatterMessages.WhiteSpaceOptions_modified_type, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_MODIFIED_TYPE, CONST_PREVIEW);
		
		final InnerNode before_operator = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_operator);
		createOption(before_operator, workingValues, FormatterMessages.WhiteSpaceOptions_assignment_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR, OPERATOR_PREVIEW);
		createOption(before_operator, workingValues, FormatterMessages.WhiteSpaceOptions_prefix_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR, OPERATOR_PREVIEW);
		createOption(before_operator, workingValues, FormatterMessages.WhiteSpaceOptions_binary_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_INFIX_OPERATOR, OPERATOR_PREVIEW);
		createOption(before_operator, workingValues, FormatterMessages.WhiteSpaceOptions_postfix_operator, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR, OPERATOR_PREVIEW);
		
		final InnerNode before_question_mark = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_question_mark);
		createOption(before_question_mark, workingValues, FormatterMessages.WhiteSpaceOptions_conditional_expression, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_MARK_IN_CONDITIONAL_EXPRESSIONS, CONDITIONAL_EXPRESSION_PREVIEW);
		
		final InnerNode before_semicolon = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_semicolon);
		createOption(before_semicolon, workingValues, FormatterMessages.WhiteSpaceOptions_statements, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON, SEMICOLON_PREVIEW);
		createOption(before_semicolon, workingValues, FormatterMessages.WhiteSpaceOptions_for_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOR_STATEMENT, FOR_PREVIEW);
		createOption(before_semicolon, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOREACH_STATEMENT, FOR_PREVIEW);
		
		final InnerNode before_slice_operator = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_before_slice_operator);
		createOption(before_slice_operator, workingValues, FormatterMessages.WhiteSpaceOptions_array_slice, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SLICE_OPERATOR, ARRAY_ACCESS_PREVIEW);
		createOption(before_slice_operator, workingValues, FormatterMessages.WhiteSpaceOptions_foreach_statement, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SLICE_OPERATOR_IN_FOREACH_RANGE_STATEMENT, FOR_PREVIEW);
		
		final InnerNode between_adjacent_brackets = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_between_adjacent_brackets);
		createOption(between_adjacent_brackets, workingValues, FormatterMessages.WhiteSpaceOptions_multidimensional_arrays, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_ADJACENT_BRACKETS_IN_MULTIDIMENSIONAL_ARRAYS, ARRAYS_PREVIEW);
		
		final InnerNode between_adjacent_parens = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_between_adjacent_parens);
		createOption(between_adjacent_parens, workingValues, FormatterMessages.WhiteSpaceOptions_name_and_arg_parens_in_c_style_fp, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_NAME_AND_ARGS_IN_C_STYLE_FP, DELEGATE_PREVIEW);
		createOption(between_adjacent_parens, workingValues, FormatterMessages.WhiteSpaceOptions_template_and_function_params_in_function_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_TEMPLATE_AND_ARG_PARENS_IN_FUNCTION_DECLARATION, FUNCTION_DECL_PREVIEW);
		createOption(between_adjacent_parens, workingValues, FormatterMessages.WhiteSpaceOptions_template_and_function_args_in_function_invocation, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_TEMPLATE_ARGS_AND_FUNCTION_ARGS, FUNCTION_CALL_PREVIEW);
		createOption(between_adjacent_parens, workingValues, FormatterMessages.WhiteSpaceOptions_successive_opcalls, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_SUCCESIVE_OPCALLS, OPCALL_PREVIEW);
		
		final InnerNode between_empty_brackets = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_brackets);
		createOption(between_empty_brackets, workingValues, FormatterMessages.WhiteSpaceOptions_array_slice, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_SLICE, ARRAY_ACCESS_PREVIEW);
		createOption(between_empty_brackets, workingValues, FormatterMessages.WhiteSpaceOptions_dynamic_arrays, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_DYNAMIC_ARRAY_TYPE, ARRAYS_PREVIEW);
		
		final InnerNode between_empty_parens = new InnerNode(null, workingValues, FormatterMessages.WhiteSpaceOptions_between_empty_parens);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_function_decl_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_DECLARATION_PARAMETERS, FUNCTION_DECL_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_function_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_TEMPLATE_ARGS, FUNCTION_DECL_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_function_invocation_argument_list, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_INVOCATION, FUNCTION_CALL_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_out_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_OUT_DECLARATION, FUNCTION_DECL_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_aggregate_template_params_ex, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_CLASS_TEMPLATE_PARAMS, AGGREGATE_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_function_delegate_type, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_DELEGATE, DELEGATE_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_new_params, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_NEW_ARGUMENTS, CONSTRUCTOR_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_extern_declarations, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_EXTERN_DECLARATIONS, EXTERN_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_template_declaration, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_TEMPLATE_DECLARATIONS, TEMPLATE_DECLARATION_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_template_invocation, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_TEMPLATE_INVOCATION, TEMPLATE_INVOCATION_PREVIEW);
		createOption(between_empty_parens, workingValues, FormatterMessages.WhiteSpaceOptions_class_invariants, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_CLASS_INVARIANTS, CLASS_INVARIANT_PREVIEW);
		
		
		roots.add(before_opening_paren);
		roots.add(after_opening_paren);
		roots.add(before_closing_paren);
		roots.add(after_closing_paren);
		roots.add(between_empty_parens);
		roots.add(between_adjacent_parens);
		roots.add(before_comma);
		roots.add(after_comma);
		roots.add(before_semicolon);
		roots.add(after_semicolon);
		roots.add(before_colon);
		roots.add(after_colon);
		roots.add(before_opening_bracket);
		roots.add(after_opening_bracket);
		roots.add(before_closing_bracket);
		roots.add(between_empty_brackets);
		roots.add(between_adjacent_brackets);
		//roots.add(before_brace);
		roots.add(before_operator);
		roots.add(after_operator);
		roots.add(before_equals);
		roots.add(after_equals);
		roots.add(before_dot);
		roots.add(after_dot);
		roots.add(before_slice_operator);
		roots.add(after_slice_operator);
		roots.add(before_elipsis);
		roots.add(after_elipsis);
		roots.add(before_question_mark);
		roots.add(after_question_mark);
		roots.add(after_asterisk);
		
		return roots;
	}
	
	private InnerNode createParentNode(List<Node> roots,
			Map<String, String> workingValues, String text)
	{
		final InnerNode parent = new InnerNode(null, workingValues, text);
		roots.add(parent);
		return parent;
	}
	
	/**
	 * Represents a node in the options tree.
	 */
public abstract static class Node {
	    
	    private InnerNode fParent;
	    private final String fName;
	    
	    public int index;
	    
	    protected final Map<String, String> fWorkingValues;
	    protected final ArrayList<Node> fChildren;

	    public Node(InnerNode parent, Map<String, String> workingValues,
	    		String message) {
	        if (workingValues == null || message == null)
	            throw new IllegalArgumentException();
	        fParent= parent;
	        fWorkingValues= workingValues;
	        fName= message;
	        fChildren= new ArrayList<Node>();
	        if (fParent != null)
	            fParent.add(this);
	    }
	    
	    public abstract void setChecked(boolean checked);
		
		public final void setParent(InnerNode parent)
		{
			if(null != fParent)
				throw new IllegalStateException("Parent can only be set once!");
			fParent = parent;
			fParent.add(this);
		}
		
	    public boolean hasChildren() { 
	        return !fChildren.isEmpty();
	    }
	    
	    public List<Node> getChildren() {
	        return Collections.unmodifiableList(fChildren);
	    }
	    
	    public InnerNode getParent() {
	        return fParent;
	    }

	    public final String toString() {
	        return fName;
	    }
	    
	    public abstract List<PreviewSnippet> getSnippets();
	    
	    public abstract void getCheckedLeafs(List<Node> list);
	}
	
	/**
	 * A node representing a group of options in the tree.
	 */
	public static class InnerNode extends Node
	{
		public InnerNode(InnerNode parent, Map<String, String> workingValues,
				String messageKey)
		{
			super(parent, workingValues, messageKey);
		}
		
		public void add(Node child)
		{
			fChildren.add(child);
		}
		
		public void getCheckedLeafs(List<Node> list)
		{
			for(Iterator<Node> iter = fChildren.iterator(); iter.hasNext();)
			{
				iter.next().getCheckedLeafs(list);
			}
		}
		
		public List<PreviewSnippet> getSnippets()
		{
			final List<PreviewSnippet> snippets = new ArrayList<PreviewSnippet>(
					fChildren.size());
			for(Iterator<Node> iter = fChildren.iterator(); iter.hasNext();)
			{
				final List<PreviewSnippet> childSnippets = iter.next()
						.getSnippets();
				for(final Iterator<PreviewSnippet> chIter = childSnippets
						.iterator(); chIter.hasNext();)
				{
					final PreviewSnippet snippet = chIter.next();
					if(!snippets.contains(snippet))
						snippets.add(snippet);
				}
			}
			return snippets;
		}
		
		public void setChecked(boolean checked)
		{
			for(Iterator<Node> iter = fChildren.iterator(); iter.hasNext();)
				iter.next().setChecked(checked);
		}
	}
	
	/**
	 * A node representing a concrete white space option in the tree.
	 */
	public static class OptionNode extends Node
	{
		private final String fKey;
		private final List<PreviewSnippet> fSnippets;
		
		public OptionNode(InnerNode parent, Map<String, String> workingValues,
				String messageKey, String key, PreviewSnippet snippet)
		{
			super(parent, workingValues, messageKey);
			fKey = key;
			fSnippets = new ArrayList<PreviewSnippet>(1);
			fSnippets.add(snippet);
		}
		
		public boolean getChecked()
		{
			return DefaultCodeFormatterConstants.TRUE.equals(fWorkingValues
					.get(fKey));
		}
		
		public void getCheckedLeafs(List<Node> list)
		{
			if(getChecked())
				list.add(this);
		}
		
		public List<PreviewSnippet> getSnippets()
		{
			return fSnippets;
		}
		
		public void setChecked(boolean checked)
		{
			fWorkingValues.put(fKey,
					checked ? DefaultCodeFormatterConstants.TRUE
							: DefaultCodeFormatterConstants.FALSE);
		}
	}
	
	public static void makeIndexForNodes(List<Node> tree, List<Node> flatList)
	{
		for(final Iterator<Node> iter = tree.iterator(); iter.hasNext();)
		{
			final Node node = (Node) iter.next();
			node.index = flatList.size();
			flatList.add(node);
			makeIndexForNodes(node.getChildren(), flatList);
		}
	}
	
	private static OptionNode createOption(InnerNode root,
			Map<String, String> workingValues, String message, String key,
			PreviewSnippet snippet)
	{
		return new OptionNode(root, workingValues, message, key, snippet);
	}
	
	/**
	 * Preview snippets.
	 */
	private static final PreviewSnippet SEMICOLON_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_STATEMENTS,
			"int a= 4; foo(); bar(x, y);"
		);
	
	private static final PreviewSnippet FOR_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_STATEMENTS, 
		    "for (int i = 0, j = array.length; i < array.length; i++, j--){}\n\n" +
		    "foreach(int i,string s;names){}" +
		    "foreach(i;0..100){}"
		);
	
	private final PreviewSnippet FUNCTION_DECL_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_COMPILATION_UNIT, 
			"void foo()out(){}body{}" +
		    "int bar(int x, final scope long y = 12, string[] z ...)in{}out(result){}body{return x + y;}" +
		    "void bar()() {}" +
		    "void quux(T, U : T*)(int a, int b){}"
		);
	
	private final PreviewSnippet FUNCTION_CALL_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_STATEMENTS, 
			"foo();\n" +
			"bar(x, y);" +
			"baz!()();" +
			"quux!(int, long)(z, t);"
		);
	
	private final PreviewSnippet MULT_LOCAL_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"int a= 0, b= 1, c= 2, d= 3;"
		);
	
	private final PreviewSnippet TRY_CATCH_FINALLY_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"try{file.open();}catch(Exception e){Stdout(e);}" +
			"finally{file.close();}"
		);
	
	private final PreviewSnippet WHILE_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"while(true){foo();}"
		);
	
	private final PreviewSnippet SYNCHRONIZED_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"synchronized(foo){bar(foo);}"
		);
	
	private final PreviewSnippet SWITCH_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"switch(x){case 1:foo();break;case 2:bar();break;" +
			"default:baz();break;}"
		);
	
	private final PreviewSnippet ASSERT_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"assert(file.canWrite(), " +
			"\"File \" ~ file.name ~ \" is read-only\");"
		);
	
	private final PreviewSnippet SCOPE_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"Socket s = connect(\"127.0.0.1\");" +
			"scope(exit){s.close();}"
		);
	
	private final PreviewSnippet WITH_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"with(some.hard.to.type.name){func();}"
		);
	
	private final PreviewSnippet TYPEOF_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"typeof(s) t;"
		);
	
	private final PreviewSnippet TYPEID_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"TypeInfo ti = typeid(k);"
		);
	
	private final PreviewSnippet DELEGATE_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"void function(int, string) fp;" +
			"string delegate() dg;" +
			"int(*c_style)(int);"
		);
	
	private final PreviewSnippet ALIGN_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_COMPILATION_UNIT, 
			"struct S{align(3){int* very_misaligned_pointer;}" +
			"align(15):int* this_one_is_worse;}"
		);
	
	private final PreviewSnippet AGGREGATE_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_COMPILATION_UNIT, 
			"class A(){} interface B{} class C(T:int, K...):A,B{}"
		);
	
	private final PreviewSnippet TEMPLATE_DECLARATION_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_COMPILATION_UNIT, 
			"template Foo(){} template Bar(T:int,U=long, V...){}"
		);
	
	private final PreviewSnippet VERSION_DEBUG_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_COMPILATION_UNIT, 
			"version(_32Bit){alias int size_t;}" +
			"else version(_64Bit){alias long size_t;}" +
			"version=ProfessionalEdition;" +
			"debug{}"
		);
	
	private final PreviewSnippet MIXIN_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_COMPILATION_UNIT, 
			"mixin(\"int x = 5;\")"
		);
	
	private final PreviewSnippet PRAGMA_PREVIEW =
		new PreviewSnippet(
			CodeFormatter.K_COMPILATION_UNIT, 
			"pragma(msg,\"Compiling...\");"
		);
	
	private final PreviewSnippet CONSTRUCTOR_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"auto x = new(10,15,20) Foo!(int)(25,30,35);" +
			"auto y = new() Bar!()();"
		);
	
	private final PreviewSnippet EXTERN_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_COMPILATION_UNIT, 
			"extern(C) int c_int;" +
			"extern(Windows): int win_int;" +
			"extern(){int d_int;}"
		);
	
	private final PreviewSnippet FILE_IMPORT_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"ubyte[] image = cast(ubyte) import(\"funny_looking_cat.jpg\");"
		);
	
	private final PreviewSnippet IF_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"if(true){writef(\"true\");}" +
			"else if(false){writef(\"false\");}" +
			"else{writef(\"logic bomb\");}"
		);
	
	private final PreviewSnippet IS_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"const bool a = is(T);" +
			"const bool b = is(T : U);" +
			"const bool c = is(T == U);" +
			"const bool d = is(T U);" +
			"const bool e = is(T U == return);" +
			"const bool f = is(T U : U*);"
		);
	
	private final PreviewSnippet CAST_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"int a = cast(int) b;"
		);
	
	private final PreviewSnippet OPCALL_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"Stdout(\"x = \")(x)(\" right now.\").newline;"
		);
	
	private final PreviewSnippet TYPE_DOT_IDENTIFIER_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"assert(int.init == 0);" +
			"const ubyte creal_size = (creal).sizeof;"
		);
	
	private final PreviewSnippet TEMPLATE_INVOCATION_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"alias Tuple!(int, long, TypeInfo, wchar[]) tp;" +
			"int x = Foo!().bar;"
		);
	
	private final PreviewSnippet EXPRESSION_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"x+=(a++*3)+((8-2)-(--6%4&8));"
		);
	
	private final PreviewSnippet OPERATOR_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"(5=6);" +
			"(++5);" +
			"(2+2);" +
			"(5--);\n\n" +
			"x+=(a++*3)+((8-2)-(--6%4&8));"
		);
	
	private final PreviewSnippet IMPORT_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_COMPILATION_UNIT, 
			"public static import x.y,x.z,x.foo=bar:a,b=c;"
		);
	
	private final PreviewSnippet ALIAS_TYPEDEF_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_COMPILATION_UNIT, 
			"alias toString toUtf8, toUtf16;"
		);
	
	private final PreviewSnippet STRUCT_INITIALIZER_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"static S a = {x:15, y:20, z:25};" +
			"static S b = {15, 20, 25};" +
			"static S c = {};"
		);
	
	private final PreviewSnippet ARRAY_INITIALIZER_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"int[] foo = [18, 156, 27, 289];" +
			"int[] bar = [3:27, 15:18,];" +
			"int[] baz = [];" +
			"int[string] numbers = [\"one\"[]:1, \"two\":2, \"three\":3];"
		);
	
	private final PreviewSnippet ARRAY_ACCESS_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"x[0]=8;" +
			"x[1,3,5]=7;" +
			"x[9..$]=11;" +
			"x[]=13;"
		);
	
	private final PreviewSnippet DOT_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"foo.bar = 5;" +
			"foo.baz(5);" +
			"foo = new Foo.Quux();" +
			"foo = (.foo);"
		);
	
	private final PreviewSnippet ARRAYS_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"int[] dynamicArray = new int[5];" +
			"int[3] staticArray = [3, 5, 7];" +
			"int[char[]] associativeArray;" +
			"int[char[]][35][][967][][creal] multiDimensional;"
		);
	
	private final PreviewSnippet LABEL_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"infiniteLoop: goto infiniteLoop;"
		);
	
	private final PreviewSnippet CONDITIONAL_EXPRESSION_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
			"max = a > b ? a : b;"
		);
	
	private final PreviewSnippet ARRAY_CONSTRUCTOR_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
				"int[] a = new int[50];"
			);
	
	private final PreviewSnippet CLASS_INVARIANT_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_COMPILATION_UNIT, 
				"class A {int x;invariant{assert(x >= 0);}}" +
				"class B {int y;invariant(){assert(y <= 0);}}"
			);
	
	private final PreviewSnippet ENUM_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_COMPILATION_UNIT, 
				"enum Colors{RED,GREEN,BLUE,}" +
				"enum{ACCT_ACTIVE=1,ACCT_SUSPENDED=2,ACCT_ADMIN=4}"
			);
	
	private final PreviewSnippet TRAITS_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
				"string[] members = __traits(allMembers, Foo);"
			);
	
	private final PreviewSnippet CONST_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
				"invariant(int) five = 5;"
			);
	
	//private final PreviewSnippet NO_PREVIEW =
	//	new PreviewSnippet(CodeFormatter.K_STATEMENTS, 
	//		""
	//	);
	
	// This PreviewSnippet is used by WhiteSpaceTabPage, so cannot be private
	final static PreviewSnippet ASTERISK_PREVIEW =
		new PreviewSnippet(CodeFormatter.K_COMPILATION_UNIT, 
				"int* a, b; // Both a and b are type int*\n\n" +
				"void alterPointer(int** x){*x = &a;}"
			);
}
