###############################################################################
# Copyright (c) 2000, 2006 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################

Templates.for_array=iterate over array
Templates.for_temp=iterate over array with temporary variable
Templates.foreach_collection=iterate over collection
Templates.foreach_dictionary=iterate over dictionary
Templates.foreach_reverse_collection=reverse iterate over collection
Templates.foreach_reverse_dictionary=reverse iterate over dictionary
Templates.do=do while statement
Templates.switch=switch case statement
Templates.if=if statement
Templates.ifelse=if else statement
Templates.elseif=else if block
Templates.else=else block
Templates.try=try catch block
Templates.catch=catch block
Templates.main=main function
Templates.public_method=public method
Templates.protected_method=protected method
Templates.package_method=package method
Templates.private_method=private method
Templates.private_static_method=private static method
Templates.cast=dynamic cast
Templates.authors=author name
Templates.new=create new object
Templates.while_condition=while loop with condition
Templates.synchronized=synchronized block
Templates.volatile=volatile block
Templates.opNeg=operator overload for: -this
Templates.opPos=operator overload for: +this
Templates.opCom=operator overload for: ~this
Templates.opPostInc=operator overload for: this++
Templates.opPostDec=operator overload for: this--
Templates.opCast=operator overload for: cast(type) this
Templates.opAdd=operator overload for: this + other
Templates.opAdd_r=operator overload for: other + this
Templates.opSub=operator overload for: this - other
Templates.opSub_r=operator overload for: other - this
Templates.opMul=operator overload for: this * other
Templates.opMul_r=operator overload for: other * this
Templates.opDiv=operator overload for: this / other
Templates.opDiv_r=operator overload for: other / this
Templates.opMod=operator overload for: this % other
Templates.opMod_r=operator overload for: other % this
Templates.opAnd=operator overload for: this & other
Templates.opAnd_r=operator overload for: other & this
Templates.opOr=operator overload for: this | other
Templates.opOr_r=operator overload for: other | this
Templates.opXor=operator overload for: this ^ other
Templates.opXor_r=operator overload for: other ^ this
Templates.opShl=operator overload for: this << other
Templates.opShl_r=operator overload for: other << this
Templates.opShr=operator overload for: this >> other
Templates.opShr_r=operator overload for: other >> this
Templates.opUShr=operator overload for: this >>> other
Templates.opUShr_r=operator overload for: other >>> this
Templates.opCat=operator overload for: this ~ other
Templates.opCat_r=operator overload for: other ~ this
Templates.opEquals=operator overload for equality
Templates.opCmp=operator overload for comparison
Templates.opAssign=operator overload for: this = other
Templates.opAddAssign=operator overload for: this += other
Templates.opSubAssign=operator overload for: this -= other
Templates.opMulAssign=operator overload for: this *= other
Templates.opDivAssign=operator overload for: this /= other
Templates.opModAssign=operator overload for: this %= other
Templates.opAndAssign=operator overload for: this &= other
Templates.opOrAssign=operator overload for: this |= other
Templates.opXorAssign=operator overload for: this ^= other
Templates.opShlAssign=operator overload for: this <<= other
Templates.opShrAssign=operator overload for: this >>= other
Templates.opUShrAssign=operator overload for: this >>>= other
Templates.opCatAssign=operator overload for: this ~= other
Templates.opIn=operator overload for: this in other
Templates.opIn_r=operator overload for: other in this
Templates.opCall=operator overload for: this(...)
Templates.opIndex=operator overload for read: this[...]
Templates.opIndexAssign=operator overload for write: this[...] = value
Templates.opSlice1=operator overload for read: this[]
Templates.opSlice2=operator overload for read: this[...]
Templates.opSliceAssign1=operator overload for write: this[] = value
Templates.opSliceAssign2=operator overload for write: this[...] = value
Templates.opApply=operator overload for: foreach
Templates.opApplyReverse=operator overload for: foreach_reverse
Templates.opDot=operator overload for: this.

# Java Only stuff
CompilationUnitContextType.variable.description.file=Filename of compilation unit
CompilationUnitContextType.variable.description.primary.type.name=Filename without extension
CompilationUnitContextType.variable.description.enclosing.method=Enclosing method name
CompilationUnitContextType.variable.description.enclosing.type=Enclosing type name
CompilationUnitContextType.variable.description.enclosing.package=Enclosing package name
CompilationUnitContextType.variable.description.enclosing.project=Enclosing project name
CompilationUnitContextType.variable.description.enclosing.method.arguments=Argument names of enclosing method
CompilationUnitContextType.variable.description.return.type=Enclosing method return type

JavaContextType.variable.description.array=A proposal for an array
JavaContextType.variable.description.array.type=A proposal for the element type of an array
JavaContextType.variable.description.array.element=A proposal for the element name of an array
JavaContextType.variable.description.index=A proposal for an index (int)
JavaContextType.variable.description.collection=A proposal for a collection (java.util.Collection)
JavaContextType.variable.description.iterator=A proposal for an iterator (java.util.Iterator)
JavaContextType.variable.description.todo=Todo task tag

JavaContext.error.title=Template Error
JavaContext.error.message=Template file incomplete or has errors.  You can load the default templates from the template preference page (Java>Templates).

CodeTemplateContextType.variable.description.todo=Todo task tag
CodeTemplateContextType.variable.description.packdeclaration=Package declaration of the new type
CodeTemplateContextType.variable.description.typedeclaration=Generated type declaration
CodeTemplateContextType.variable.description.getterfieldname=The name of field to set or get
CodeTemplateContextType.variable.description.getterfieldtype=The type of the field to set or get
CodeTemplateContextType.variable.description.fieldname=The name of field
CodeTemplateContextType.variable.description.fieldtype=The type of the field
CodeTemplateContextType.variable.description.barefieldname=The name of field to set or get without prefix or suffix
CodeTemplateContextType.variable.description.param=The parameter passed into the setter method
CodeTemplateContextType.variable.description.typecomment=Content of code template 'typecomment'
CodeTemplateContextType.variable.description.exceptiontype=The type of the caught exception
CodeTemplateContextType.variable.description.exceptionvar=The variable name of the caught exception
CodeTemplateContextType.variable.description.enclosingtype=The type enclosing this method
CodeTemplateContextType.variable.description.typename=Name of the current type
CodeTemplateContextType.variable.description.enclosingmethod=The enclosing method
CodeTemplateContextType.variable.description.bodystatement=Return statement or super call
CodeTemplateContextType.variable.description.returntype=Return type of the enclosing method
CodeTemplateContextType.variable.description.tags=Generated Javadoc tags (@param, @return...)
CodeTemplateContextType.variable.description.seetag=See tag pointing to the overridden method (@see T#m())

CodeTemplateContextType.variable.description.filename=Name of the enclosing compilation unit
CodeTemplateContextType.variable.description.packagename=Name of the enclosing package
CodeTemplateContextType.variable.description.projectname=Name of the enclosing project

CodeTemplateContextType.validate.unknownvariable=Variable ''{0}'' is unknown.
CodeTemplateContextType.validate.missingvariable=Variable ''{0}'' is required.
CodeTemplateContextType.validate.invalidcomment=Pattern is not a valid Java comment.


# strings in default templates
CodeTemplates.constructorcomment=Comment for created constructors
CodeTemplates.filecomment=Comment for created Java files
CodeTemplates.typecomment=Comment for created types
CodeTemplates.fieldcomment=Comment for fields
CodeTemplates.nonoverridingcomment=Comment for non-overriding methods
CodeTemplates.overridecomment=Comment for overriding methods
CodeTemplates.delegatecomment=Comment for delegate methods
CodeTemplates.gettercomment=Comment for getter method
# ! Do not translate ${bare_field_name} !
CodeTemplates.gettercomment.returntagcontent=the ${bare_field_name}
CodeTemplates.settercomment=Comment for setter method
# ! Do not translate ${bare_field_name} !
CodeTemplates.settercomment.paramtagcontent=the ${bare_field_name} to set

CodeTemplates.newfile=Newly created files
CodeTemplates.classbody=Code in new class type bodies
CodeTemplates.interfacebody=Code in new interface type bodies
CodeTemplates.enumbody=Code in new enum type bodies
CodeTemplates.annotationbody=Code in new annotation type bodies
CodeTemplates.catchblock=Code in new catch blocks
CodeTemplates.methodstub=Code in created method stubs
CodeTemplates.constructorstub=Code in created constructor stubs
CodeTemplates.getterstub=Code in created getters
CodeTemplates.setterstub=Code in created setters

CodeTemplates.overridecomment.nonjd=(non-Javadoc)
CodeTemplates.delegatecomment.nonjd=(non-Javadoc)

CodeTemplates.catchblock.tododesc=Auto-generated catch block
CodeTemplates.methodstub.tododesc=Auto-generated method stub
CodeTemplates.constructorstub.tododesc=Auto-generated constructor stub

