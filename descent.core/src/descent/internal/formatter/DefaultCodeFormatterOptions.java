package descent.internal.formatter;

import java.util.HashMap;
import java.util.Map;

import descent.core.formatter.DefaultCodeFormatterConstants;
import descent.internal.formatter.Alignment;

public class DefaultCodeFormatterOptions
{	
	public enum TabChar
	{
		TAB(DefaultCodeFormatterConstants.TAB),
		SPACE(DefaultCodeFormatterConstants.SPACE),
		MIXED(DefaultCodeFormatterConstants.MIXED);
		
		private final String constVal;
		TabChar(String $constVal) { constVal = $constVal; }
		public String toString() { return constVal; }
	}
	
	public enum BracePosition
	{
		END_OF_LINE(DefaultCodeFormatterConstants.END_OF_LINE),
		NEXT_LINE(DefaultCodeFormatterConstants.NEXT_LINE),
		NEXT_LINE_SHIFTED(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED);
		
		private final String constVal;
		BracePosition(String $constVal) { constVal = $constVal; }
		public String toString() { return constVal; }
	}
	
	public static DefaultCodeFormatterOptions getDefaultSettings() {
		return getBuiltInProfile(DefaultCodeFormatterConstants.DEFAULT_PROFILE);
	}
	
	public static DefaultCodeFormatterOptions getBuiltInProfile(String name)
	{
		DefaultCodeFormatterOptions options = new DefaultCodeFormatterOptions();
		options.setDefaultSettings();
		
		if(name.equals(DefaultCodeFormatterConstants.PROFILE_JAVA_DEFAULTS))
		{
			options.indent_cases_compare_to_switch = false;
			options.indent_break_compare_to_switch = true;
		}
		
		else if(name.equals(DefaultCodeFormatterConstants.PROFILE_C_SHARP_DEFAULTS))
		{
			options.brace_position_for_function_declaration = BracePosition.NEXT_LINE;
			options.brace_position_for_type_declaration = BracePosition.NEXT_LINE;
			options.brace_position_for_enum_declaration = BracePosition.NEXT_LINE;
			options.brace_position_for_template_declaration = BracePosition.NEXT_LINE;
			options.brace_position_for_conditional_declaration = BracePosition.NEXT_LINE;
			options.brace_position_for_conditional_statement = BracePosition.NEXT_LINE;
			options.brace_position_for_loop_statement = BracePosition.NEXT_LINE;
			options.brace_position_for_function_literal = BracePosition.NEXT_LINE;
			options.brace_position_for_anonymous_type = BracePosition.NEXT_LINE;
			options.brace_position_for_switch_statement = BracePosition.NEXT_LINE;
			options.brace_position_for_switch_case = BracePosition.NEXT_LINE;
			options.brace_position_for_try_catch_finally = BracePosition.NEXT_LINE;
			options.brace_position_for_modifiers = BracePosition.NEXT_LINE;
			options.brace_position_for_synchronized_statement = BracePosition.NEXT_LINE;
			options.brace_position_for_with_statement = BracePosition.NEXT_LINE;
			options.brace_position_for_scope_statement = BracePosition.NEXT_LINE;
			options.brace_position_for_pragmas = BracePosition.NEXT_LINE;
			options.indent_break_compare_to_switch = true;
		}
		
		return options;
	}
	
	// User formatting options
	public BracePosition brace_position_for_function_declaration;
	public BracePosition brace_position_for_type_declaration;
	public BracePosition brace_position_for_enum_declaration;
	public BracePosition brace_position_for_template_declaration;
	public BracePosition brace_position_for_conditional_declaration;
	public BracePosition brace_position_for_conditional_statement;
	public BracePosition brace_position_for_loop_statement;
	public BracePosition brace_position_for_function_literal;
	public BracePosition brace_position_for_anonymous_type;
	public BracePosition brace_position_for_switch_statement;
	public BracePosition brace_position_for_switch_case;
	public BracePosition brace_position_for_try_catch_finally;
	public BracePosition brace_position_for_modifiers;
	public BracePosition brace_position_for_synchronized_statement;
	public BracePosition brace_position_for_with_statement;
	public BracePosition brace_position_for_scope_statement;
	public BracePosition brace_position_for_pragmas;
	public boolean insert_space_before_opening_paren_in_function_declaration_parameters;
	public boolean insert_space_before_opening_paren_in_function_template_args;
	public boolean insert_space_before_opening_paren_in_function_invocation;
	public boolean insert_space_before_opening_paren_in_catch;
	public boolean insert_space_before_opening_paren_in_for_loops;
	public boolean insert_space_before_opening_paren_in_while_loops;
	public boolean insert_space_before_opening_paren_in_foreach_loops;
	public boolean insert_space_before_opening_paren_in_out_declaration;
	public boolean insert_space_before_opening_paren_in_synchronized_statement;
	public boolean insert_space_before_opening_paren_in_switch_statements;
	public boolean insert_space_before_opening_paren_in_align_declarations;
	public boolean insert_space_before_opening_paren_in_class_template_params;
	public boolean insert_space_before_opening_paren_in_assert_statements;
	public boolean insert_space_before_opening_paren_in_version_debug;
	public boolean insert_space_before_opening_paren_in_mixins;
	public boolean insert_space_before_opening_paren_in_pragmas;
	public boolean insert_space_before_opening_paren_in_scope_statements;
	public boolean insert_space_before_opening_paren_in_with_statements;
	public boolean insert_space_before_opening_paren_in_typeof_statements;
	public boolean insert_space_before_opening_paren_in_typeid_statements;
	public boolean insert_space_before_opening_paren_in_delegate;
	public boolean insert_space_before_opening_paren_in_c_style_fp;
	public boolean insert_space_before_opening_paren_in_new_arguments;
	public boolean insert_space_before_opening_paren_in_extern_declarations;
	public boolean insert_space_before_opening_paren_in_file_imports;
	public boolean insert_space_before_opening_paren_in_if_statements;
	public boolean insert_space_before_opening_paren_in_is_expressions;
	public boolean insert_space_before_opening_paren_in_casts;
	public boolean insert_space_before_opening_paren_in_template_declarations;
	public boolean insert_space_before_opening_paren_in_parenthesized_expressions;
	public boolean insert_space_before_opening_paren_in_type_dot_identifier_expression;
	public boolean insert_space_after_opening_paren_in_function_declaration_parameters;
	public boolean insert_space_after_opening_paren_in_function_template_args;
	public boolean insert_space_after_opening_paren_in_function_invocation;
	public boolean insert_space_after_opening_paren_in_catch;
	public boolean insert_space_after_opening_paren_in_for_loops;
	public boolean insert_space_after_opening_paren_in_while_loops;
	public boolean insert_space_after_opening_paren_in_foreach_loops;
	public boolean insert_space_after_opening_paren_in_out_declaration;
	public boolean insert_space_after_opening_paren_in_synchronized_statement;
	public boolean insert_space_after_opening_paren_in_switch_statements;
	public boolean insert_space_after_opening_paren_in_align_declarations;
	public boolean insert_space_after_opening_paren_in_class_template_params;
	public boolean insert_space_after_opening_paren_in_assert_statements;
	public boolean insert_space_after_opening_paren_in_version_debug;
	public boolean insert_space_after_opening_paren_in_mixins;
	public boolean insert_space_after_opening_paren_in_pragmas;
	public boolean insert_space_after_opening_paren_in_scope_statements;
	public boolean insert_space_after_opening_paren_in_with_statements;
	public boolean insert_space_after_opening_paren_in_typeof_statements;
	public boolean insert_space_after_opening_paren_in_typeid_statements;
	public boolean insert_space_after_opening_paren_in_delegate;
	public boolean insert_space_after_opening_paren_in_c_style_fp;
	public boolean insert_space_after_opening_paren_in_new_arguments;
	public boolean insert_space_after_opening_paren_in_extern_declarations;
	public boolean insert_space_after_opening_paren_in_file_imports;
	public boolean insert_space_after_opening_paren_in_if_statements;
	public boolean insert_space_after_opening_paren_in_is_expressions;
	public boolean insert_space_after_opening_paren_in_casts;
	public boolean insert_space_after_opening_paren_in_template_declarations;
	public boolean insert_space_after_opening_paren_in_parenthesized_expressions;
	public boolean insert_space_after_opening_paren_in_template_invocation;
	public boolean insert_space_after_opening_paren_in_type_dot_identifier_expression;
	public boolean insert_space_before_closing_paren_in_function_declaration_parameters;
	public boolean insert_space_before_closing_paren_in_function_template_args;
	public boolean insert_space_before_closing_paren_in_function_invocation;
	public boolean insert_space_before_closing_paren_in_catch;
	public boolean insert_space_before_closing_paren_in_for_loops;
	public boolean insert_space_before_closing_paren_in_while_loops;
	public boolean insert_space_before_closing_paren_in_foreach_loops;
	public boolean insert_space_before_closing_paren_in_out_declaration;
	public boolean insert_space_before_closing_paren_in_synchronized_statement;
	public boolean insert_space_before_closing_paren_in_switch_statements;
	public boolean insert_space_before_closing_paren_in_align_declarations;
	public boolean insert_space_before_closing_paren_in_class_template_params;
	public boolean insert_space_before_closing_paren_in_assert_statements;
	public boolean insert_space_before_closing_paren_in_version_debug;
	public boolean insert_space_before_closing_paren_in_mixins;
	public boolean insert_space_before_closing_paren_in_pragmas;
	public boolean insert_space_before_closing_paren_in_scope_statements;
	public boolean insert_space_before_closing_paren_in_with_statements;
	public boolean insert_space_before_closing_paren_in_typeof_statements;
	public boolean insert_space_before_closing_paren_in_typeid_statements;
	public boolean insert_space_before_closing_paren_in_delegate;
	public boolean insert_space_before_closing_paren_in_c_style_fp;
	public boolean insert_space_before_closing_paren_in_new_arguments;
	public boolean insert_space_before_closing_paren_in_extern_declarations;
	public boolean insert_space_before_closing_paren_in_file_imports;
	public boolean insert_space_before_closing_paren_in_if_statements;
	public boolean insert_space_before_closing_paren_in_is_expressions;
	public boolean insert_space_before_closing_paren_in_casts;
	public boolean insert_space_before_closing_paren_in_template_declarations;
	public boolean insert_space_before_closing_paren_in_parenthesized_expressions;
	public boolean insert_space_before_closing_paren_in_template_invocation;
	public boolean insert_space_before_closing_paren_in_type_dot_identifier_expression;
	public boolean insert_space_between_empty_parens_in_function_declaration_parameters;
	public boolean insert_space_between_empty_parens_in_function_template_args;
	public boolean insert_space_between_empty_parens_in_function_invocation;
	public boolean insert_space_between_empty_parens_in_out_declaration;
	public boolean insert_space_between_empty_parens_in_class_template_params;
	public boolean insert_space_between_empty_parens_in_delegate;
	public boolean insert_space_between_empty_parens_in_new_arguments;
	public boolean insert_space_between_empty_parens_in_extern_declarations;
	public boolean insert_space_between_empty_parens_in_template_declarations;
	public boolean insert_space_between_empty_parens_in_template_invocation;
	public boolean insert_space_between_name_and_args_in_c_style_fp;
	public boolean insert_space_between_template_and_arg_parens_in_function_declaration;
	public boolean insert_space_between_template_args_and_function_args;
	public boolean insert_space_between_succesive_opcalls;
	public boolean insert_space_before_comma_in_base_class_lists;
	public boolean insert_space_before_comma_in_array_literal;
	public boolean insert_space_before_comma_in_function_invocation_arguments;
	public boolean insert_space_before_comma_in_function_declaration_parameters;
	public boolean insert_space_before_comma_in_function_template_parameters;
	public boolean insert_space_before_comma_in_aggregate_template_parameters;
	public boolean insert_space_before_comma_in_foreach_statement;
	public boolean insert_space_before_comma_in_multiple_imports;
	public boolean insert_space_before_comma_in_selective_imports;
	public boolean insert_space_before_comma_in_pragmas;
	public boolean insert_space_before_comma_in_struct_initializer;
	public boolean insert_space_before_comma_in_template_declaration;
	public boolean insert_space_before_comma_in_template_invocation;
	public boolean insert_space_before_comma_in_multiple_field_declarations;
	public boolean insert_space_before_comma_in_array_access;
	public boolean insert_space_before_comma_in_delegates;
	public boolean insert_space_before_comma_in_new_arguments;
	public boolean insert_space_before_trailing_comma_in_array_initializer;
	public boolean insert_space_before_comma_in_assert_statements;
	public boolean insert_space_after_comma_in_base_class_lists;
	public boolean insert_space_after_comma_in_array_literal;
	public boolean insert_space_after_comma_in_function_invocation_arguments;
	public boolean insert_space_after_comma_in_function_declaration_parameters;
	public boolean insert_space_after_comma_in_function_template_parameters;
	public boolean insert_space_after_comma_in_aggregate_template_parameters;
	public boolean insert_space_after_comma_in_foreach_statement;
	public boolean insert_space_after_comma_in_multiple_imports;
	public boolean insert_space_after_comma_in_selective_imports;
	public boolean insert_space_after_comma_in_pragmas;
	public boolean insert_space_after_comma_in_struct_initializer;
	public boolean insert_space_after_comma_in_template_declaration;
	public boolean insert_space_after_comma_in_template_invocation;
	public boolean insert_space_after_comma_in_multiple_field_declarations;
	public boolean insert_space_after_comma_in_array_access;
	public boolean insert_space_after_comma_in_delegates;
	public boolean insert_space_after_comma_in_new_arguments;
	public boolean insert_space_after_trailing_comma_in_array_initializer;
	public boolean insert_space_after_comma_in_assert_statements;
	public boolean insert_space_before_assignment_operator;
	public boolean insert_space_before_prefix_operator;
	public boolean insert_space_before_infix_operator;
	public boolean insert_space_before_postfix_operator;
	public boolean insert_space_after_assignment_operator;
	public boolean insert_space_after_prefix_operator;
	public boolean insert_space_after_infix_operator;
	public boolean insert_space_after_postfix_operator;
	public boolean insert_space_before_exclamation_point_in_template_invocation;
	public boolean insert_space_after_exclamation_point_in_template_invocation;
	public boolean insert_space_after_closing_paren_in_casts;
	public boolean insert_space_before_dot_in_qualified_names;
	public boolean insert_space_before_dot_in_type_dot_identifier_expressions;
	public boolean insert_space_after_dot_in_qualified_names;
	public boolean insert_space_after_dot_in_type_dot_identifier_expressions;
	public boolean insert_space_before_slice_operator;
	public boolean insert_space_after_slice_operator;
	public boolean insert_space_before_elipsis_in_function_varargs;
	public boolean insert_space_before_elipsis_in_tuples;
	public boolean insert_space_after_elipsis_in_function_varargs;
	public boolean insert_space_after_elipsis_in_tuples;
	public boolean insert_space_between_empty_brackets_in_slice;
	public boolean insert_space_between_empty_brackets_in_dynamic_array_type;
	public boolean insert_space_between_adjacent_brackets_in_multidimensional_arrays;
	public boolean insert_space_before_colon_in_base_class_lists;
	public boolean insert_space_before_colon_in_template_specific_type;
	public boolean insert_space_before_colon_in_array_initializer;
	public boolean insert_space_before_colon_in_struct_initializer;
	public boolean insert_space_before_colon_in_case_default_statement;
	public boolean insert_space_before_colon_in_selective_imports;
	public boolean insert_space_before_colon_in_conditional_expressions;
	public boolean insert_space_before_colon_in_statement_labels;
	public boolean insert_space_before_colon_in_modifiers;
	public boolean insert_space_after_colon_in_base_class_lists;
	public boolean insert_space_after_colon_in_template_specific_type;
	public boolean insert_space_after_colon_in_array_initializer;
	public boolean insert_space_after_colon_in_struct_initializer;
	public boolean insert_space_after_colon_in_case_default_statement;
	public boolean insert_space_after_colon_in_selective_imports;
	public boolean insert_space_after_colon_in_conditional_expressions;
	public boolean insert_space_after_colon_in_statement_labels;
	public boolean insert_space_before_semicolon;
	public boolean insert_space_before_semicolon_in_for_statement;
	public boolean insert_space_before_semicolon_in_foreach_statement;
	public boolean insert_space_after_semicolon_in_foreach_statement;
	public boolean insert_space_after_semicolon_in_for_statement;
	public boolean insert_space_before_question_mark_in_conditional_expressions;
	public boolean insert_space_after_question_mark_in_conditional_expressions;
	public int blank_lines_before_module;
	public int blank_lines_after_module;
	public int number_of_empty_lines_to_preserve;
	public boolean insert_new_line_before_else;
	public boolean insert_new_line_before_catch;
	public boolean insert_new_line_before_finally;
	public boolean insert_new_line_before_while_in_do_statement;
	public boolean insert_new_line_after_case_or_default_statement;
	public boolean insert_new_line_after_label;
	public boolean keep_else_conditional_on_one_line;
	public boolean insert_new_line_at_end_of_file_if_missing;
	public boolean keep_simple_then_declaration_on_same_line;
	public boolean keep_simple_else_declaration_on_same_line;
	public boolean keep_simple_then_statement_on_same_line;
	public boolean keep_simple_else_statement_on_same_line;
	public boolean keep_simple_try_statement_on_same_line;
	public boolean keep_simple_catch_statement_on_same_line;
	public boolean keep_simple_finally_statement_on_same_line;
	public boolean keep_simple_loop_statement_on_same_line;
	public boolean keep_simple_synchronized_statement_on_same_line;
	public boolean keep_simple_with_statement_on_same_line;
	public boolean keep_functions_with_no_statement_in_one_line;
	public boolean keep_functions_with_one_statement_in_one_line;
	public int indentation_size;
	public int continuation_indentation;
	public boolean indent_empty_lines;
	public boolean indent_body_declarations_compare_to_type_header;
	public boolean indent_body_declarations_compare_to_template_header;
	public boolean indent_body_declarations_compare_to_modifier_header;
	public boolean indent_statements_compare_to_function_header;
	public boolean indent_in_out_body_compare_to_function_header;
	public boolean indent_statements_compare_to_function_in_header;
	public boolean indent_statements_compare_to_function_out_header;
	public boolean indent_statements_compare_to_function_body_header;
	public boolean indent_enum_members_compare_to_enum_header;
	public boolean indent_cases_compare_to_switch;
	public boolean indent_break_compare_to_switch;
	public boolean indent_statements_compare_to_case;
	public TabChar tab_char;
	public int tab_size;
	public boolean use_tabs_only_for_leading_indentations;
	public boolean never_indent_block_comments_on_first_column;
	public boolean never_indent_line_comments_on_first_column;
	public int line_split;
	public int page_width;
	
	// Set by the caller
	public String line_separator;
    public int initial_indentation_level;
	
	private DefaultCodeFormatterOptions() {
		// cannot be instantiated
	}

	public DefaultCodeFormatterOptions(Map settings) {
		setDefaultSettings();
		if (settings == null) return;
		set(settings);
	}

	private String getAlignment2(int alignment) {
		return Integer.toString(alignment);
	}

	public Map<String, String> getMap() {
		
		Map<String, String> options = new HashMap<String, String>();
		
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_FUNCTION_DECLARATION, brace_position_for_function_declaration.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION, brace_position_for_type_declaration.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ENUM_DECLARATION, brace_position_for_enum_declaration.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TEMPLATE_DECLARATION, brace_position_for_template_declaration.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONDITIONAL_DECLARATION, brace_position_for_conditional_declaration.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONDITIONAL_STATEMENT, brace_position_for_conditional_statement.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_LOOP_STATEMENT, brace_position_for_loop_statement.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_FUNCTION_LITERAL, brace_position_for_function_literal.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE, brace_position_for_anonymous_type.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH_STATEMENT, brace_position_for_switch_statement.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH_CASE, brace_position_for_switch_case.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TRY_CATCH_FINALLY, brace_position_for_try_catch_finally.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_MODIFIERS, brace_position_for_modifiers.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SYNCHRONIZED_STATEMENT, brace_position_for_synchronized_statement.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_WITH_STATEMENT, brace_position_for_with_statement.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SCOPE_STATEMENT, brace_position_for_scope_statement.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_PRAGMAS, brace_position_for_pragmas.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS, insert_space_before_opening_paren_in_function_declaration_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_TEMPLATE_ARGS, insert_space_before_opening_paren_in_function_template_args ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_INVOCATION, insert_space_before_opening_paren_in_function_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CATCH, insert_space_before_opening_paren_in_catch ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOR_LOOPS, insert_space_before_opening_paren_in_for_loops ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WHILE_LOOPS, insert_space_before_opening_paren_in_while_loops ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOREACH_LOOPS, insert_space_before_opening_paren_in_foreach_loops ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_OUT_DECLARATION, insert_space_before_opening_paren_in_out_declaration ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SYNCHRONIZED_STATEMENT, insert_space_before_opening_paren_in_synchronized_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SWITCH_STATEMENTS, insert_space_before_opening_paren_in_switch_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ALIGN_DECLARATIONS, insert_space_before_opening_paren_in_align_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CLASS_TEMPLATE_PARAMS, insert_space_before_opening_paren_in_class_template_params ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ASSERT_STATEMENTS, insert_space_before_opening_paren_in_assert_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_VERSION_DEBUG, insert_space_before_opening_paren_in_version_debug ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_MIXINS, insert_space_before_opening_paren_in_mixins ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PRAGMAS, insert_space_before_opening_paren_in_pragmas ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SCOPE_STATEMENTS, insert_space_before_opening_paren_in_scope_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WITH_STATEMENTS, insert_space_before_opening_paren_in_with_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPEOF_STATEMENTS, insert_space_before_opening_paren_in_typeof_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPEID_STATEMENTS, insert_space_before_opening_paren_in_typeid_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_DELEGATE, insert_space_before_opening_paren_in_delegate ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_C_STYLE_FP, insert_space_before_opening_paren_in_c_style_fp ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_NEW_ARGUMENTS, insert_space_before_opening_paren_in_new_arguments ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_EXTERN_DECLARATIONS, insert_space_before_opening_paren_in_extern_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FILE_IMPORTS, insert_space_before_opening_paren_in_file_imports ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IF_STATEMENTS, insert_space_before_opening_paren_in_if_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IS_EXPRESSIONS, insert_space_before_opening_paren_in_is_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CASTS, insert_space_before_opening_paren_in_casts ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TEMPLATE_DECLARATIONS, insert_space_before_opening_paren_in_template_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSIONS, insert_space_before_opening_paren_in_parenthesized_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION, insert_space_before_opening_paren_in_type_dot_identifier_expression ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS, insert_space_after_opening_paren_in_function_declaration_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_TEMPLATE_ARGS, insert_space_after_opening_paren_in_function_template_args ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_INVOCATION, insert_space_after_opening_paren_in_function_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CATCH, insert_space_after_opening_paren_in_catch ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOR_LOOPS, insert_space_after_opening_paren_in_for_loops ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WHILE_LOOPS, insert_space_after_opening_paren_in_while_loops ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOREACH_LOOPS, insert_space_after_opening_paren_in_foreach_loops ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_OUT_DECLARATION, insert_space_after_opening_paren_in_out_declaration ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SYNCHRONIZED_STATEMENT, insert_space_after_opening_paren_in_synchronized_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SWITCH_STATEMENTS, insert_space_after_opening_paren_in_switch_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ALIGN_DECLARATIONS, insert_space_after_opening_paren_in_align_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CLASS_TEMPLATE_PARAMS, insert_space_after_opening_paren_in_class_template_params ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ASSERT_STATEMENTS, insert_space_after_opening_paren_in_assert_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_VERSION_DEBUG, insert_space_after_opening_paren_in_version_debug ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_MIXINS, insert_space_after_opening_paren_in_mixins ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PRAGMAS, insert_space_after_opening_paren_in_pragmas ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SCOPE_STATEMENTS, insert_space_after_opening_paren_in_scope_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WITH_STATEMENTS, insert_space_after_opening_paren_in_with_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPEOF_STATEMENTS, insert_space_after_opening_paren_in_typeof_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPEID_STATEMENTS, insert_space_after_opening_paren_in_typeid_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_DELEGATE, insert_space_after_opening_paren_in_delegate ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_C_STYLE_FP, insert_space_after_opening_paren_in_c_style_fp ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_NEW_ARGUMENTS, insert_space_after_opening_paren_in_new_arguments ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_EXTERN_DECLARATIONS, insert_space_after_opening_paren_in_extern_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FILE_IMPORTS, insert_space_after_opening_paren_in_file_imports ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IF_STATEMENTS, insert_space_after_opening_paren_in_if_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IS_EXPRESSIONS, insert_space_after_opening_paren_in_is_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CASTS, insert_space_after_opening_paren_in_casts ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TEMPLATE_DECLARATIONS, insert_space_after_opening_paren_in_template_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSIONS, insert_space_after_opening_paren_in_parenthesized_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TEMPLATE_INVOCATION, insert_space_after_opening_paren_in_template_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION, insert_space_after_opening_paren_in_type_dot_identifier_expression ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS, insert_space_before_closing_paren_in_function_declaration_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_TEMPLATE_ARGS, insert_space_before_closing_paren_in_function_template_args ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_INVOCATION, insert_space_before_closing_paren_in_function_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CATCH, insert_space_before_closing_paren_in_catch ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOR_LOOPS, insert_space_before_closing_paren_in_for_loops ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WHILE_LOOPS, insert_space_before_closing_paren_in_while_loops ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOREACH_LOOPS, insert_space_before_closing_paren_in_foreach_loops ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_OUT_DECLARATION, insert_space_before_closing_paren_in_out_declaration ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SYNCHRONIZED_STATEMENT, insert_space_before_closing_paren_in_synchronized_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SWITCH_STATEMENTS, insert_space_before_closing_paren_in_switch_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ALIGN_DECLARATIONS, insert_space_before_closing_paren_in_align_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CLASS_TEMPLATE_PARAMS, insert_space_before_closing_paren_in_class_template_params ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ASSERT_STATEMENTS, insert_space_before_closing_paren_in_assert_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_VERSION_DEBUG, insert_space_before_closing_paren_in_version_debug ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_MIXINS, insert_space_before_closing_paren_in_mixins ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PRAGMAS, insert_space_before_closing_paren_in_pragmas ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SCOPE_STATEMENTS, insert_space_before_closing_paren_in_scope_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WITH_STATEMENTS, insert_space_before_closing_paren_in_with_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPEOF_STATEMENTS, insert_space_before_closing_paren_in_typeof_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPEID_STATEMENTS, insert_space_before_closing_paren_in_typeid_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_DELEGATE, insert_space_before_closing_paren_in_delegate ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_C_STYLE_FP, insert_space_before_closing_paren_in_c_style_fp ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_NEW_ARGUMENTS, insert_space_before_closing_paren_in_new_arguments ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_EXTERN_DECLARATIONS, insert_space_before_closing_paren_in_extern_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FILE_IMPORTS, insert_space_before_closing_paren_in_file_imports ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IF_STATEMENTS, insert_space_before_closing_paren_in_if_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IS_EXPRESSIONS, insert_space_before_closing_paren_in_is_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CASTS, insert_space_before_closing_paren_in_casts ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TEMPLATE_DECLARATIONS, insert_space_before_closing_paren_in_template_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHESIZED_EXPRESSIONS, insert_space_before_closing_paren_in_parenthesized_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TEMPLATE_INVOCATION, insert_space_before_closing_paren_in_template_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION, insert_space_before_closing_paren_in_type_dot_identifier_expression ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_DECLARATION_PARAMETERS, insert_space_between_empty_parens_in_function_declaration_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_TEMPLATE_ARGS, insert_space_between_empty_parens_in_function_template_args ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_INVOCATION, insert_space_between_empty_parens_in_function_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_OUT_DECLARATION, insert_space_between_empty_parens_in_out_declaration ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_CLASS_TEMPLATE_PARAMS, insert_space_between_empty_parens_in_class_template_params ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_DELEGATE, insert_space_between_empty_parens_in_delegate ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_NEW_ARGUMENTS, insert_space_between_empty_parens_in_new_arguments ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_EXTERN_DECLARATIONS, insert_space_between_empty_parens_in_extern_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_TEMPLATE_DECLARATIONS, insert_space_between_empty_parens_in_template_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_TEMPLATE_INVOCATION, insert_space_between_empty_parens_in_template_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_NAME_AND_ARGS_IN_C_STYLE_FP, insert_space_between_name_and_args_in_c_style_fp ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_TEMPLATE_AND_ARG_PARENS_IN_FUNCTION_DECLARATION, insert_space_between_template_and_arg_parens_in_function_declaration ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_TEMPLATE_ARGS_AND_FUNCTION_ARGS, insert_space_between_template_args_and_function_args ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_SUCCESIVE_OPCALLS, insert_space_between_succesive_opcalls ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_BASE_CLASS_LISTS, insert_space_before_comma_in_base_class_lists ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_LITERAL, insert_space_before_comma_in_array_literal ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_INVOCATION_ARGUMENTS, insert_space_before_comma_in_function_invocation_arguments ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_DECLARATION_PARAMETERS, insert_space_before_comma_in_function_declaration_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_TEMPLATE_PARAMETERS, insert_space_before_comma_in_function_template_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_AGGREGATE_TEMPLATE_PARAMETERS, insert_space_before_comma_in_aggregate_template_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOREACH_STATEMENT, insert_space_before_comma_in_foreach_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_IMPORTS, insert_space_before_comma_in_multiple_imports ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SELECTIVE_IMPORTS, insert_space_before_comma_in_selective_imports ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_PRAGMAS, insert_space_before_comma_in_pragmas ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_STRUCT_INITIALIZER, insert_space_before_comma_in_struct_initializer ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TEMPLATE_DECLARATION, insert_space_before_comma_in_template_declaration ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TEMPLATE_INVOCATION, insert_space_before_comma_in_template_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS, insert_space_before_comma_in_multiple_field_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_ACCESS, insert_space_before_comma_in_array_access ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_DELEGATES, insert_space_before_comma_in_delegates ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_NEW_ARGUMENTS, insert_space_before_comma_in_new_arguments ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TRAILING_COMMA_IN_ARRAY_INITIALIZER, insert_space_before_trailing_comma_in_array_initializer ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ASSERT_STATEMENTS, insert_space_before_comma_in_assert_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_BASE_CLASS_LISTS, insert_space_after_comma_in_base_class_lists ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_LITERAL, insert_space_after_comma_in_array_literal ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_INVOCATION_ARGUMENTS, insert_space_after_comma_in_function_invocation_arguments ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_DECLARATION_PARAMETERS, insert_space_after_comma_in_function_declaration_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_TEMPLATE_PARAMETERS, insert_space_after_comma_in_function_template_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_AGGREGATE_TEMPLATE_PARAMETERS, insert_space_after_comma_in_aggregate_template_parameters ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOREACH_STATEMENT, insert_space_after_comma_in_foreach_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_IMPORTS, insert_space_after_comma_in_multiple_imports ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SELECTIVE_IMPORTS, insert_space_after_comma_in_selective_imports ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_PRAGMAS, insert_space_after_comma_in_pragmas ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_STRUCT_INITIALIZER, insert_space_after_comma_in_struct_initializer ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TEMPLATE_DECLARATION, insert_space_after_comma_in_template_declaration ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TEMPLATE_INVOCATION, insert_space_after_comma_in_template_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS, insert_space_after_comma_in_multiple_field_declarations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_ACCESS, insert_space_after_comma_in_array_access ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_DELEGATES, insert_space_after_comma_in_delegates ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_NEW_ARGUMENTS, insert_space_after_comma_in_new_arguments ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_TRAILING_COMMA_IN_ARRAY_INITIALIZER, insert_space_after_trailing_comma_in_array_initializer ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ASSERT_STATEMENTS, insert_space_after_comma_in_assert_statements ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR, insert_space_before_assignment_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR, insert_space_before_prefix_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_INFIX_OPERATOR, insert_space_before_infix_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR, insert_space_before_postfix_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATOR, insert_space_after_assignment_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR, insert_space_after_prefix_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_INFIX_OPERATOR, insert_space_after_infix_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR, insert_space_after_postfix_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EXCLAMATION_POINT_IN_TEMPLATE_INVOCATION, insert_space_before_exclamation_point_in_template_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EXCLAMATION_POINT_IN_TEMPLATE_INVOCATION, insert_space_after_exclamation_point_in_template_invocation ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CASTS, insert_space_after_closing_paren_in_casts ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_DOT_IN_QUALIFIED_NAMES, insert_space_before_dot_in_qualified_names ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_DOT_IN_TYPE_DOT_IDENTIFIER_EXPRESSIONS, insert_space_before_dot_in_type_dot_identifier_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_DOT_IN_QUALIFIED_NAMES, insert_space_after_dot_in_qualified_names ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_DOT_IN_TYPE_DOT_IDENTIFIER_EXPRESSIONS, insert_space_after_dot_in_type_dot_identifier_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SLICE_OPERATOR, insert_space_before_slice_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SLICE_OPERATOR, insert_space_after_slice_operator ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELIPSIS_IN_FUNCTION_VARARGS, insert_space_before_elipsis_in_function_varargs ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELIPSIS_IN_TUPLES, insert_space_before_elipsis_in_tuples ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELIPSIS_IN_FUNCTION_VARARGS, insert_space_after_elipsis_in_function_varargs ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELIPSIS_IN_TUPLES, insert_space_after_elipsis_in_tuples ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_SLICE, insert_space_between_empty_brackets_in_slice ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_DYNAMIC_ARRAY_TYPE, insert_space_between_empty_brackets_in_dynamic_array_type ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_ADJACENT_BRACKETS_IN_MULTIDIMENSIONAL_ARRAYS, insert_space_between_adjacent_brackets_in_multidimensional_arrays ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_BASE_CLASS_LISTS, insert_space_before_colon_in_base_class_lists ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_TEMPLATE_SPECIFIC_TYPE, insert_space_before_colon_in_template_specific_type ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ARRAY_INITIALIZER, insert_space_before_colon_in_array_initializer ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_STRUCT_INITIALIZER, insert_space_before_colon_in_struct_initializer ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE_DEFAULT_STATEMENT, insert_space_before_colon_in_case_default_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_SELECTIVE_IMPORTS, insert_space_before_colon_in_selective_imports ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL_EXPRESSIONS, insert_space_before_colon_in_conditional_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_STATEMENT_LABELS, insert_space_before_colon_in_statement_labels ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_MODIFIERS, insert_space_before_colon_in_modifiers ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_BASE_CLASS_LISTS, insert_space_after_colon_in_base_class_lists ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_TEMPLATE_SPECIFIC_TYPE, insert_space_after_colon_in_template_specific_type ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ARRAY_INITIALIZER, insert_space_after_colon_in_array_initializer ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_STRUCT_INITIALIZER, insert_space_after_colon_in_struct_initializer ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE_DEFAULT_STATEMENT, insert_space_after_colon_in_case_default_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_SELECTIVE_IMPORTS, insert_space_after_colon_in_selective_imports ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL_EXPRESSIONS, insert_space_after_colon_in_conditional_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_STATEMENT_LABELS, insert_space_after_colon_in_statement_labels ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON, insert_space_before_semicolon ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOR_STATEMENT, insert_space_before_semicolon_in_for_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOREACH_STATEMENT, insert_space_before_semicolon_in_foreach_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOREACH_STATEMENT, insert_space_after_semicolon_in_foreach_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR_STATEMENT, insert_space_after_semicolon_in_for_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_MARK_IN_CONDITIONAL_EXPRESSIONS, insert_space_before_question_mark_in_conditional_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_MARK_IN_CONDITIONAL_EXPRESSIONS, insert_space_after_question_mark_in_conditional_expressions ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_MODULE, Integer.toString(blank_lines_before_module));
		options.put(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_MODULE, Integer.toString(blank_lines_after_module));
		options.put(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE, Integer.toString(number_of_empty_lines_to_preserve));
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_ELSE, insert_new_line_before_else ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CATCH, insert_new_line_before_catch ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_FINALLY, insert_new_line_before_finally ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_WHILE_IN_DO_STATEMENT, insert_new_line_before_while_in_do_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_CASE_OR_DEFAULT_STATEMENT, insert_new_line_after_case_or_default_statement ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_LABEL, insert_new_line_after_label ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_ELSE_CONDITIONAL_ON_ONE_LINE, keep_else_conditional_on_one_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AT_END_OF_FILE_IF_MISSING, insert_new_line_at_end_of_file_if_missing ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_THEN_DECLARATION_ON_SAME_LINE, keep_simple_then_declaration_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_ELSE_DECLARATION_ON_SAME_LINE, keep_simple_else_declaration_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_THEN_STATEMENT_ON_SAME_LINE, keep_simple_then_statement_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_ELSE_STATEMENT_ON_SAME_LINE, keep_simple_else_statement_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_TRY_STATEMENT_ON_SAME_LINE, keep_simple_try_statement_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_CATCH_STATEMENT_ON_SAME_LINE, keep_simple_catch_statement_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_FINALLY_STATEMENT_ON_SAME_LINE, keep_simple_finally_statement_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_LOOP_STATEMENT_ON_SAME_LINE, keep_simple_loop_statement_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_SYNCHRONIZED_STATEMENT_ON_SAME_LINE, keep_simple_synchronized_statement_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_WITH_STATEMENT_ON_SAME_LINE, keep_simple_with_statement_on_same_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_FUNCTIONS_WITH_NO_STATEMENT_IN_ONE_LINE, keep_functions_with_no_statement_in_one_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_KEEP_FUNCTIONS_WITH_ONE_STATEMENT_IN_ONE_LINE, keep_functions_with_one_statement_in_one_line ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE, Integer.toString(indentation_size));
		options.put(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION, Integer.toString(continuation_indentation));
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_EMPTY_LINES, indent_empty_lines ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER, indent_body_declarations_compare_to_type_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TEMPLATE_HEADER, indent_body_declarations_compare_to_template_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_MODIFIER_HEADER, indent_body_declarations_compare_to_modifier_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_FUNCTION_HEADER, indent_statements_compare_to_function_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_IN_OUT_BODY_COMPARE_TO_FUNCTION_HEADER, indent_in_out_body_compare_to_function_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_FUNCTION_IN_HEADER, indent_statements_compare_to_function_in_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_FUNCTION_OUT_HEADER, indent_statements_compare_to_function_out_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_FUNCTION_BODY_HEADER, indent_statements_compare_to_function_body_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_ENUM_MEMBERS_COMPARE_TO_ENUM_HEADER, indent_enum_members_compare_to_enum_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_CASES_COMPARE_TO_SWITCH, indent_cases_compare_to_switch ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_BREAK_COMPARE_TO_SWITCH, indent_break_compare_to_switch ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_CASE, indent_statements_compare_to_case ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR, tab_char.toString());
		options.put(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE, Integer.toString(tab_size));
		options.put(DefaultCodeFormatterConstants.FORMATTER_USE_TABS_ONLY_FOR_LEADING_INDENTATIONS, use_tabs_only_for_leading_indentations ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN, never_indent_block_comments_on_first_column ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN, never_indent_line_comments_on_first_column ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
		options.put(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT, Integer.toString(line_split));
		options.put(DefaultCodeFormatterConstants.FORMATTER_PAGE_WIDTH, Integer.toString(page_width));
		 
		return options;
	}

	public void set(Map<String, String> settings) {
		
		String current;
		
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_FUNCTION_DECLARATION);
		if(null != current) {
			try {
				brace_position_for_function_declaration = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_function_declaration = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION);
		if(null != current) {
			try {
				brace_position_for_type_declaration = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_type_declaration = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ENUM_DECLARATION);
		if(null != current) {
			try {
				brace_position_for_enum_declaration = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_enum_declaration = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TEMPLATE_DECLARATION);
		if(null != current) {
			try {
				brace_position_for_template_declaration = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_template_declaration = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONDITIONAL_DECLARATION);
		if(null != current) {
			try {
				brace_position_for_conditional_declaration = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_conditional_declaration = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONDITIONAL_STATEMENT);
		if(null != current) {
			try {
				brace_position_for_conditional_statement = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_conditional_statement = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_LOOP_STATEMENT);
		if(null != current) {
			try {
				brace_position_for_loop_statement = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_loop_statement = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_FUNCTION_LITERAL);
		if(null != current) {
			try {
				brace_position_for_function_literal = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_function_literal = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE);
		if(null != current) {
			try {
				brace_position_for_anonymous_type = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_anonymous_type = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH_STATEMENT);
		if(null != current) {
			try {
				brace_position_for_switch_statement = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_switch_statement = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH_CASE);
		if(null != current) {
			try {
				brace_position_for_switch_case = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_switch_case = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TRY_CATCH_FINALLY);
		if(null != current) {
			try {
				brace_position_for_try_catch_finally = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_try_catch_finally = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_MODIFIERS);
		if(null != current) {
			try {
				brace_position_for_modifiers = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_modifiers = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SYNCHRONIZED_STATEMENT);
		if(null != current) {
			try {
				brace_position_for_synchronized_statement = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_synchronized_statement = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_WITH_STATEMENT);
		if(null != current) {
			try {
				brace_position_for_with_statement = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_with_statement = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SCOPE_STATEMENT);
		if(null != current) {
			try {
				brace_position_for_scope_statement = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_scope_statement = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_PRAGMAS);
		if(null != current) {
			try {
				brace_position_for_pragmas = DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(current) ? BracePosition.NEXT_LINE_SHIFTED : DefaultCodeFormatterConstants.NEXT_LINE.equals(current) ? BracePosition.NEXT_LINE : BracePosition.END_OF_LINE;
			} catch(Exception e) {
				brace_position_for_pragmas = BracePosition.END_OF_LINE;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_function_declaration_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_function_declaration_parameters = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_TEMPLATE_ARGS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_function_template_args = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_function_template_args = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FUNCTION_INVOCATION);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_function_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_function_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CATCH);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_catch = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_catch = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOR_LOOPS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_for_loops = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_for_loops = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WHILE_LOOPS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_while_loops = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_while_loops = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOREACH_LOOPS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_foreach_loops = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_foreach_loops = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_OUT_DECLARATION);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_out_declaration = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_out_declaration = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SYNCHRONIZED_STATEMENT);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_synchronized_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_synchronized_statement = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SWITCH_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_switch_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_switch_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ALIGN_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_align_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_align_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CLASS_TEMPLATE_PARAMS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_class_template_params = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_class_template_params = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ASSERT_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_assert_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_assert_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_VERSION_DEBUG);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_version_debug = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_version_debug = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_MIXINS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_mixins = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_mixins = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PRAGMAS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_pragmas = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_pragmas = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SCOPE_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_scope_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_scope_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WITH_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_with_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_with_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPEOF_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_typeof_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_typeof_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPEID_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_typeid_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_typeid_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_DELEGATE);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_delegate = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_delegate = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_C_STYLE_FP);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_c_style_fp = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_c_style_fp = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_NEW_ARGUMENTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_new_arguments = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_new_arguments = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_EXTERN_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_extern_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_extern_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FILE_IMPORTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_file_imports = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_file_imports = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IF_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_if_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_if_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IS_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_is_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_is_expressions = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CASTS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_casts = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_casts = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TEMPLATE_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_template_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_template_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_parenthesized_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_parenthesized_expressions = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION);
		if(null != current) {
			try {
				insert_space_before_opening_paren_in_type_dot_identifier_expression = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_opening_paren_in_type_dot_identifier_expression = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_function_declaration_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_function_declaration_parameters = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_TEMPLATE_ARGS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_function_template_args = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_function_template_args = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FUNCTION_INVOCATION);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_function_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_function_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CATCH);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_catch = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_catch = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOR_LOOPS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_for_loops = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_for_loops = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WHILE_LOOPS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_while_loops = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_while_loops = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOREACH_LOOPS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_foreach_loops = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_foreach_loops = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_OUT_DECLARATION);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_out_declaration = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_out_declaration = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SYNCHRONIZED_STATEMENT);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_synchronized_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_synchronized_statement = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SWITCH_STATEMENTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_switch_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_switch_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ALIGN_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_align_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_align_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CLASS_TEMPLATE_PARAMS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_class_template_params = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_class_template_params = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ASSERT_STATEMENTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_assert_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_assert_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_VERSION_DEBUG);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_version_debug = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_version_debug = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_MIXINS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_mixins = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_mixins = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PRAGMAS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_pragmas = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_pragmas = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SCOPE_STATEMENTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_scope_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_scope_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WITH_STATEMENTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_with_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_with_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPEOF_STATEMENTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_typeof_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_typeof_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPEID_STATEMENTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_typeid_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_typeid_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_DELEGATE);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_delegate = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_delegate = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_C_STYLE_FP);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_c_style_fp = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_c_style_fp = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_NEW_ARGUMENTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_new_arguments = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_new_arguments = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_EXTERN_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_extern_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_extern_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FILE_IMPORTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_file_imports = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_file_imports = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IF_STATEMENTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_if_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_if_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IS_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_is_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_is_expressions = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CASTS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_casts = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_casts = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TEMPLATE_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_template_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_template_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_parenthesized_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_parenthesized_expressions = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TEMPLATE_INVOCATION);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_template_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_template_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION);
		if(null != current) {
			try {
				insert_space_after_opening_paren_in_type_dot_identifier_expression = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_opening_paren_in_type_dot_identifier_expression = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_DECLARATION_PARAMETERS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_function_declaration_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_function_declaration_parameters = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_TEMPLATE_ARGS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_function_template_args = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_function_template_args = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FUNCTION_INVOCATION);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_function_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_function_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CATCH);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_catch = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_catch = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOR_LOOPS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_for_loops = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_for_loops = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WHILE_LOOPS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_while_loops = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_while_loops = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOREACH_LOOPS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_foreach_loops = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_foreach_loops = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_OUT_DECLARATION);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_out_declaration = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_out_declaration = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SYNCHRONIZED_STATEMENT);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_synchronized_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_synchronized_statement = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SWITCH_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_switch_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_switch_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ALIGN_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_align_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_align_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CLASS_TEMPLATE_PARAMS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_class_template_params = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_class_template_params = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ASSERT_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_assert_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_assert_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_VERSION_DEBUG);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_version_debug = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_version_debug = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_MIXINS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_mixins = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_mixins = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PRAGMAS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_pragmas = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_pragmas = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SCOPE_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_scope_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_scope_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WITH_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_with_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_with_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPEOF_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_typeof_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_typeof_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPEID_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_typeid_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_typeid_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_DELEGATE);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_delegate = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_delegate = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_C_STYLE_FP);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_c_style_fp = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_c_style_fp = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_NEW_ARGUMENTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_new_arguments = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_new_arguments = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_EXTERN_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_extern_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_extern_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FILE_IMPORTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_file_imports = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_file_imports = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IF_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_if_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_if_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IS_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_is_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_is_expressions = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CASTS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_casts = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_casts = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TEMPLATE_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_template_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_template_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHESIZED_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_parenthesized_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_parenthesized_expressions = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TEMPLATE_INVOCATION);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_template_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_template_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TYPE_DOT_IDENTIFIER_EXPRESSION);
		if(null != current) {
			try {
				insert_space_before_closing_paren_in_type_dot_identifier_expression = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_closing_paren_in_type_dot_identifier_expression = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_DECLARATION_PARAMETERS);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_function_declaration_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_function_declaration_parameters = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_TEMPLATE_ARGS);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_function_template_args = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_function_template_args = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_FUNCTION_INVOCATION);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_function_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_function_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_OUT_DECLARATION);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_out_declaration = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_out_declaration = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_CLASS_TEMPLATE_PARAMS);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_class_template_params = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_class_template_params = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_DELEGATE);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_delegate = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_delegate = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_NEW_ARGUMENTS);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_new_arguments = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_new_arguments = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_EXTERN_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_extern_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_extern_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_TEMPLATE_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_template_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_template_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_TEMPLATE_INVOCATION);
		if(null != current) {
			try {
				insert_space_between_empty_parens_in_template_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_parens_in_template_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_NAME_AND_ARGS_IN_C_STYLE_FP);
		if(null != current) {
			try {
				insert_space_between_name_and_args_in_c_style_fp = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_name_and_args_in_c_style_fp = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_TEMPLATE_AND_ARG_PARENS_IN_FUNCTION_DECLARATION);
		if(null != current) {
			try {
				insert_space_between_template_and_arg_parens_in_function_declaration = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_template_and_arg_parens_in_function_declaration = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_TEMPLATE_ARGS_AND_FUNCTION_ARGS);
		if(null != current) {
			try {
				insert_space_between_template_args_and_function_args = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_template_args_and_function_args = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_SUCCESIVE_OPCALLS);
		if(null != current) {
			try {
				insert_space_between_succesive_opcalls = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_succesive_opcalls = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_BASE_CLASS_LISTS);
		if(null != current) {
			try {
				insert_space_before_comma_in_base_class_lists = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_base_class_lists = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_LITERAL);
		if(null != current) {
			try {
				insert_space_before_comma_in_array_literal = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_array_literal = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_INVOCATION_ARGUMENTS);
		if(null != current) {
			try {
				insert_space_before_comma_in_function_invocation_arguments = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_function_invocation_arguments = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_DECLARATION_PARAMETERS);
		if(null != current) {
			try {
				insert_space_before_comma_in_function_declaration_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_function_declaration_parameters = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FUNCTION_TEMPLATE_PARAMETERS);
		if(null != current) {
			try {
				insert_space_before_comma_in_function_template_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_function_template_parameters = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_AGGREGATE_TEMPLATE_PARAMETERS);
		if(null != current) {
			try {
				insert_space_before_comma_in_aggregate_template_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_aggregate_template_parameters = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOREACH_STATEMENT);
		if(null != current) {
			try {
				insert_space_before_comma_in_foreach_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_foreach_statement = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_IMPORTS);
		if(null != current) {
			try {
				insert_space_before_comma_in_multiple_imports = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_multiple_imports = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SELECTIVE_IMPORTS);
		if(null != current) {
			try {
				insert_space_before_comma_in_selective_imports = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_selective_imports = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_PRAGMAS);
		if(null != current) {
			try {
				insert_space_before_comma_in_pragmas = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_pragmas = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_STRUCT_INITIALIZER);
		if(null != current) {
			try {
				insert_space_before_comma_in_struct_initializer = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_struct_initializer = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TEMPLATE_DECLARATION);
		if(null != current) {
			try {
				insert_space_before_comma_in_template_declaration = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_template_declaration = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TEMPLATE_INVOCATION);
		if(null != current) {
			try {
				insert_space_before_comma_in_template_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_template_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_before_comma_in_multiple_field_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_multiple_field_declarations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_ACCESS);
		if(null != current) {
			try {
				insert_space_before_comma_in_array_access = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_array_access = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_DELEGATES);
		if(null != current) {
			try {
				insert_space_before_comma_in_delegates = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_delegates = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_NEW_ARGUMENTS);
		if(null != current) {
			try {
				insert_space_before_comma_in_new_arguments = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_new_arguments = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TRAILING_COMMA_IN_ARRAY_INITIALIZER);
		if(null != current) {
			try {
				insert_space_before_trailing_comma_in_array_initializer = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_trailing_comma_in_array_initializer = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ASSERT_STATEMENTS);
		if(null != current) {
			try {
				insert_space_before_comma_in_assert_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_comma_in_assert_statements = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_BASE_CLASS_LISTS);
		if(null != current) {
			try {
				insert_space_after_comma_in_base_class_lists = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_base_class_lists = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_LITERAL);
		if(null != current) {
			try {
				insert_space_after_comma_in_array_literal = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_array_literal = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_INVOCATION_ARGUMENTS);
		if(null != current) {
			try {
				insert_space_after_comma_in_function_invocation_arguments = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_function_invocation_arguments = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_DECLARATION_PARAMETERS);
		if(null != current) {
			try {
				insert_space_after_comma_in_function_declaration_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_function_declaration_parameters = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FUNCTION_TEMPLATE_PARAMETERS);
		if(null != current) {
			try {
				insert_space_after_comma_in_function_template_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_function_template_parameters = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_AGGREGATE_TEMPLATE_PARAMETERS);
		if(null != current) {
			try {
				insert_space_after_comma_in_aggregate_template_parameters = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_aggregate_template_parameters = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOREACH_STATEMENT);
		if(null != current) {
			try {
				insert_space_after_comma_in_foreach_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_foreach_statement = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_IMPORTS);
		if(null != current) {
			try {
				insert_space_after_comma_in_multiple_imports = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_multiple_imports = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SELECTIVE_IMPORTS);
		if(null != current) {
			try {
				insert_space_after_comma_in_selective_imports = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_selective_imports = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_PRAGMAS);
		if(null != current) {
			try {
				insert_space_after_comma_in_pragmas = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_pragmas = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_STRUCT_INITIALIZER);
		if(null != current) {
			try {
				insert_space_after_comma_in_struct_initializer = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_struct_initializer = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TEMPLATE_DECLARATION);
		if(null != current) {
			try {
				insert_space_after_comma_in_template_declaration = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_template_declaration = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TEMPLATE_INVOCATION);
		if(null != current) {
			try {
				insert_space_after_comma_in_template_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_template_invocation = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS);
		if(null != current) {
			try {
				insert_space_after_comma_in_multiple_field_declarations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_multiple_field_declarations = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_ACCESS);
		if(null != current) {
			try {
				insert_space_after_comma_in_array_access = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_array_access = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_DELEGATES);
		if(null != current) {
			try {
				insert_space_after_comma_in_delegates = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_delegates = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_NEW_ARGUMENTS);
		if(null != current) {
			try {
				insert_space_after_comma_in_new_arguments = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_new_arguments = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_TRAILING_COMMA_IN_ARRAY_INITIALIZER);
		if(null != current) {
			try {
				insert_space_after_trailing_comma_in_array_initializer = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_trailing_comma_in_array_initializer = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ASSERT_STATEMENTS);
		if(null != current) {
			try {
				insert_space_after_comma_in_assert_statements = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_comma_in_assert_statements = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR);
		if(null != current) {
			try {
				insert_space_before_assignment_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_assignment_operator = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR);
		if(null != current) {
			try {
				insert_space_before_prefix_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_prefix_operator = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_INFIX_OPERATOR);
		if(null != current) {
			try {
				insert_space_before_infix_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_infix_operator = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR);
		if(null != current) {
			try {
				insert_space_before_postfix_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_postfix_operator = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATOR);
		if(null != current) {
			try {
				insert_space_after_assignment_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_assignment_operator = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR);
		if(null != current) {
			try {
				insert_space_after_prefix_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_prefix_operator = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_INFIX_OPERATOR);
		if(null != current) {
			try {
				insert_space_after_infix_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_infix_operator = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR);
		if(null != current) {
			try {
				insert_space_after_postfix_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_postfix_operator = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_EXCLAMATION_POINT_IN_TEMPLATE_INVOCATION);
		if(null != current) {
			try {
				insert_space_before_exclamation_point_in_template_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_exclamation_point_in_template_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_EXCLAMATION_POINT_IN_TEMPLATE_INVOCATION);
		if(null != current) {
			try {
				insert_space_after_exclamation_point_in_template_invocation = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_exclamation_point_in_template_invocation = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CASTS);
		if(null != current) {
			try {
				insert_space_after_closing_paren_in_casts = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_closing_paren_in_casts = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_DOT_IN_QUALIFIED_NAMES);
		if(null != current) {
			try {
				insert_space_before_dot_in_qualified_names = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_dot_in_qualified_names = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_DOT_IN_TYPE_DOT_IDENTIFIER_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_before_dot_in_type_dot_identifier_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_dot_in_type_dot_identifier_expressions = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_DOT_IN_QUALIFIED_NAMES);
		if(null != current) {
			try {
				insert_space_after_dot_in_qualified_names = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_dot_in_qualified_names = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_DOT_IN_TYPE_DOT_IDENTIFIER_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_after_dot_in_type_dot_identifier_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_dot_in_type_dot_identifier_expressions = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SLICE_OPERATOR);
		if(null != current) {
			try {
				insert_space_before_slice_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_slice_operator = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SLICE_OPERATOR);
		if(null != current) {
			try {
				insert_space_after_slice_operator = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_slice_operator = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELIPSIS_IN_FUNCTION_VARARGS);
		if(null != current) {
			try {
				insert_space_before_elipsis_in_function_varargs = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_elipsis_in_function_varargs = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELIPSIS_IN_TUPLES);
		if(null != current) {
			try {
				insert_space_before_elipsis_in_tuples = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_elipsis_in_tuples = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELIPSIS_IN_FUNCTION_VARARGS);
		if(null != current) {
			try {
				insert_space_after_elipsis_in_function_varargs = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_elipsis_in_function_varargs = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELIPSIS_IN_TUPLES);
		if(null != current) {
			try {
				insert_space_after_elipsis_in_tuples = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_elipsis_in_tuples = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_SLICE);
		if(null != current) {
			try {
				insert_space_between_empty_brackets_in_slice = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_brackets_in_slice = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_DYNAMIC_ARRAY_TYPE);
		if(null != current) {
			try {
				insert_space_between_empty_brackets_in_dynamic_array_type = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_empty_brackets_in_dynamic_array_type = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_ADJACENT_BRACKETS_IN_MULTIDIMENSIONAL_ARRAYS);
		if(null != current) {
			try {
				insert_space_between_adjacent_brackets_in_multidimensional_arrays = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_between_adjacent_brackets_in_multidimensional_arrays = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_BASE_CLASS_LISTS);
		if(null != current) {
			try {
				insert_space_before_colon_in_base_class_lists = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_colon_in_base_class_lists = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_TEMPLATE_SPECIFIC_TYPE);
		if(null != current) {
			try {
				insert_space_before_colon_in_template_specific_type = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_colon_in_template_specific_type = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ARRAY_INITIALIZER);
		if(null != current) {
			try {
				insert_space_before_colon_in_array_initializer = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_colon_in_array_initializer = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_STRUCT_INITIALIZER);
		if(null != current) {
			try {
				insert_space_before_colon_in_struct_initializer = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_colon_in_struct_initializer = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE_DEFAULT_STATEMENT);
		if(null != current) {
			try {
				insert_space_before_colon_in_case_default_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_colon_in_case_default_statement = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_SELECTIVE_IMPORTS);
		if(null != current) {
			try {
				insert_space_before_colon_in_selective_imports = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_colon_in_selective_imports = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_before_colon_in_conditional_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_colon_in_conditional_expressions = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_STATEMENT_LABELS);
		if(null != current) {
			try {
				insert_space_before_colon_in_statement_labels = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_colon_in_statement_labels = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_MODIFIERS);
		if(null != current) {
			try {
				insert_space_before_colon_in_modifiers = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_colon_in_modifiers = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_BASE_CLASS_LISTS);
		if(null != current) {
			try {
				insert_space_after_colon_in_base_class_lists = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_colon_in_base_class_lists = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_TEMPLATE_SPECIFIC_TYPE);
		if(null != current) {
			try {
				insert_space_after_colon_in_template_specific_type = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_colon_in_template_specific_type = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ARRAY_INITIALIZER);
		if(null != current) {
			try {
				insert_space_after_colon_in_array_initializer = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_colon_in_array_initializer = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_STRUCT_INITIALIZER);
		if(null != current) {
			try {
				insert_space_after_colon_in_struct_initializer = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_colon_in_struct_initializer = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE_DEFAULT_STATEMENT);
		if(null != current) {
			try {
				insert_space_after_colon_in_case_default_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_colon_in_case_default_statement = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_SELECTIVE_IMPORTS);
		if(null != current) {
			try {
				insert_space_after_colon_in_selective_imports = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_colon_in_selective_imports = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_after_colon_in_conditional_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_colon_in_conditional_expressions = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_STATEMENT_LABELS);
		if(null != current) {
			try {
				insert_space_after_colon_in_statement_labels = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_colon_in_statement_labels = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON);
		if(null != current) {
			try {
				insert_space_before_semicolon = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_semicolon = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOR_STATEMENT);
		if(null != current) {
			try {
				insert_space_before_semicolon_in_for_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_semicolon_in_for_statement = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOREACH_STATEMENT);
		if(null != current) {
			try {
				insert_space_before_semicolon_in_foreach_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_semicolon_in_foreach_statement = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOREACH_STATEMENT);
		if(null != current) {
			try {
				insert_space_after_semicolon_in_foreach_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_semicolon_in_foreach_statement = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR_STATEMENT);
		if(null != current) {
			try {
				insert_space_after_semicolon_in_for_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_semicolon_in_for_statement = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_MARK_IN_CONDITIONAL_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_before_question_mark_in_conditional_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_before_question_mark_in_conditional_expressions = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_MARK_IN_CONDITIONAL_EXPRESSIONS);
		if(null != current) {
			try {
				insert_space_after_question_mark_in_conditional_expressions = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_space_after_question_mark_in_conditional_expressions = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_MODULE);
		if(null != current) {
			try {
				blank_lines_before_module = Integer.parseInt(current);
			} catch(Exception e) {
				blank_lines_before_module = 0;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_MODULE);
		if(null != current) {
			try {
				blank_lines_after_module = Integer.parseInt(current);
			} catch(Exception e) {
				blank_lines_after_module = 1;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE);
		if(null != current) {
			try {
				number_of_empty_lines_to_preserve = Integer.parseInt(current);
			} catch(Exception e) {
				number_of_empty_lines_to_preserve = 1;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_ELSE);
		if(null != current) {
			try {
				insert_new_line_before_else = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_new_line_before_else = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CATCH);
		if(null != current) {
			try {
				insert_new_line_before_catch = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_new_line_before_catch = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_FINALLY);
		if(null != current) {
			try {
				insert_new_line_before_finally = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_new_line_before_finally = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_WHILE_IN_DO_STATEMENT);
		if(null != current) {
			try {
				insert_new_line_before_while_in_do_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_new_line_before_while_in_do_statement = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_CASE_OR_DEFAULT_STATEMENT);
		if(null != current) {
			try {
				insert_new_line_after_case_or_default_statement = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_new_line_after_case_or_default_statement = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_LABEL);
		if(null != current) {
			try {
				insert_new_line_after_label = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_new_line_after_label = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_ELSE_CONDITIONAL_ON_ONE_LINE);
		if(null != current) {
			try {
				keep_else_conditional_on_one_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_else_conditional_on_one_line = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AT_END_OF_FILE_IF_MISSING);
		if(null != current) {
			try {
				insert_new_line_at_end_of_file_if_missing = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				insert_new_line_at_end_of_file_if_missing = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_THEN_DECLARATION_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_then_declaration_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_then_declaration_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_ELSE_DECLARATION_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_else_declaration_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_else_declaration_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_THEN_STATEMENT_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_then_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_then_statement_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_ELSE_STATEMENT_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_else_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_else_statement_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_TRY_STATEMENT_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_try_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_try_statement_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_CATCH_STATEMENT_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_catch_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_catch_statement_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_FINALLY_STATEMENT_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_finally_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_finally_statement_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_LOOP_STATEMENT_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_loop_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_loop_statement_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_SYNCHRONIZED_STATEMENT_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_synchronized_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_synchronized_statement_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_WITH_STATEMENT_ON_SAME_LINE);
		if(null != current) {
			try {
				keep_simple_with_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_simple_with_statement_on_same_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_FUNCTIONS_WITH_NO_STATEMENT_IN_ONE_LINE);
		if(null != current) {
			try {
				keep_functions_with_no_statement_in_one_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_functions_with_no_statement_in_one_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_FUNCTIONS_WITH_ONE_STATEMENT_IN_ONE_LINE);
		if(null != current) {
			try {
				keep_functions_with_one_statement_in_one_line = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				keep_functions_with_one_statement_in_one_line = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE);
		if(null != current) {
			try {
				indentation_size = Integer.parseInt(current);
			} catch(Exception e) {
				indentation_size = 4;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION);
		if(null != current) {
			try {
				continuation_indentation = Integer.parseInt(current);
			} catch(Exception e) {
				continuation_indentation = 2;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_EMPTY_LINES);
		if(null != current) {
			try {
				indent_empty_lines = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_empty_lines = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER);
		if(null != current) {
			try {
				indent_body_declarations_compare_to_type_header = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_body_declarations_compare_to_type_header = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TEMPLATE_HEADER);
		if(null != current) {
			try {
				indent_body_declarations_compare_to_template_header = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_body_declarations_compare_to_template_header = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_MODIFIER_HEADER);
		if(null != current) {
			try {
				indent_body_declarations_compare_to_modifier_header = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_body_declarations_compare_to_modifier_header = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_FUNCTION_HEADER);
		if(null != current) {
			try {
				indent_statements_compare_to_function_header = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_statements_compare_to_function_header = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_IN_OUT_BODY_COMPARE_TO_FUNCTION_HEADER);
		if(null != current) {
			try {
				indent_in_out_body_compare_to_function_header = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_in_out_body_compare_to_function_header = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_FUNCTION_IN_HEADER);
		if(null != current) {
			try {
				indent_statements_compare_to_function_in_header = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_statements_compare_to_function_in_header = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_FUNCTION_OUT_HEADER);
		if(null != current) {
			try {
				indent_statements_compare_to_function_out_header = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_statements_compare_to_function_out_header = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_FUNCTION_BODY_HEADER);
		if(null != current) {
			try {
				indent_statements_compare_to_function_body_header = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_statements_compare_to_function_body_header = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_ENUM_MEMBERS_COMPARE_TO_ENUM_HEADER);
		if(null != current) {
			try {
				indent_enum_members_compare_to_enum_header = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_enum_members_compare_to_enum_header = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_CASES_COMPARE_TO_SWITCH);
		if(null != current) {
			try {
				indent_cases_compare_to_switch = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_cases_compare_to_switch = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BREAK_COMPARE_TO_SWITCH);
		if(null != current) {
			try {
				indent_break_compare_to_switch = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_break_compare_to_switch = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_STATEMENTS_COMPARE_TO_CASE);
		if(null != current) {
			try {
				indent_statements_compare_to_case = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				indent_statements_compare_to_case = true;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);
		if(null != current) {
			try {
				tab_char = DefaultCodeFormatterConstants.MIXED.equals(current) ? TabChar.MIXED : DefaultCodeFormatterConstants.SPACE.equals(current) ? TabChar.SPACE : TabChar.TAB;
			} catch(Exception e) {
				tab_char = TabChar.TAB;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE);
		if(null != current) {
			try {
				tab_size = Integer.parseInt(current);
			} catch(Exception e) {
				tab_size = 4;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_USE_TABS_ONLY_FOR_LEADING_INDENTATIONS);
		if(null != current) {
			try {
				use_tabs_only_for_leading_indentations = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				use_tabs_only_for_leading_indentations = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN);
		if(null != current) {
			try {
				never_indent_block_comments_on_first_column = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				never_indent_block_comments_on_first_column = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN);
		if(null != current) {
			try {
				never_indent_line_comments_on_first_column = DefaultCodeFormatterConstants.TRUE.equals(current);
			} catch(Exception e) {
				never_indent_line_comments_on_first_column = false;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT);
		if(null != current) {
			try {
				line_split = Integer.parseInt(current);
			} catch(Exception e) {
				line_split = 9999;
			}
		}
		
		current = settings.get(DefaultCodeFormatterConstants.FORMATTER_PAGE_WIDTH);
		if(null != current) {
			try {
				page_width = Integer.parseInt(current);
			} catch(Exception e) {
				page_width = 80;
			}
		}
	}

	public void setDefaultSettings() {
		brace_position_for_function_declaration = BracePosition.END_OF_LINE;
		brace_position_for_type_declaration = BracePosition.END_OF_LINE;
		brace_position_for_enum_declaration = BracePosition.END_OF_LINE;
		brace_position_for_template_declaration = BracePosition.END_OF_LINE;
		brace_position_for_conditional_declaration = BracePosition.END_OF_LINE;
		brace_position_for_conditional_statement = BracePosition.END_OF_LINE;
		brace_position_for_loop_statement = BracePosition.END_OF_LINE;
		brace_position_for_function_literal = BracePosition.END_OF_LINE;
		brace_position_for_anonymous_type = BracePosition.END_OF_LINE;
		brace_position_for_switch_statement = BracePosition.END_OF_LINE;
		brace_position_for_switch_case = BracePosition.END_OF_LINE;
		brace_position_for_try_catch_finally = BracePosition.END_OF_LINE;
		brace_position_for_modifiers = BracePosition.END_OF_LINE;
		brace_position_for_synchronized_statement = BracePosition.END_OF_LINE;
		brace_position_for_with_statement = BracePosition.END_OF_LINE;
		brace_position_for_scope_statement = BracePosition.END_OF_LINE;
		brace_position_for_pragmas = BracePosition.END_OF_LINE;
		insert_space_before_opening_paren_in_function_declaration_parameters = false;
		insert_space_before_opening_paren_in_function_template_args = false;
		insert_space_before_opening_paren_in_function_invocation = false;
		insert_space_before_opening_paren_in_catch = false;
		insert_space_before_opening_paren_in_for_loops = false;
		insert_space_before_opening_paren_in_while_loops = false;
		insert_space_before_opening_paren_in_foreach_loops = false;
		insert_space_before_opening_paren_in_out_declaration = false;
		insert_space_before_opening_paren_in_synchronized_statement = false;
		insert_space_before_opening_paren_in_switch_statements = false;
		insert_space_before_opening_paren_in_align_declarations = false;
		insert_space_before_opening_paren_in_class_template_params = false;
		insert_space_before_opening_paren_in_assert_statements = false;
		insert_space_before_opening_paren_in_version_debug = false;
		insert_space_before_opening_paren_in_mixins = false;
		insert_space_before_opening_paren_in_pragmas = false;
		insert_space_before_opening_paren_in_scope_statements = false;
		insert_space_before_opening_paren_in_with_statements = false;
		insert_space_before_opening_paren_in_typeof_statements = false;
		insert_space_before_opening_paren_in_typeid_statements = false;
		insert_space_before_opening_paren_in_delegate = false;
		insert_space_before_opening_paren_in_c_style_fp = true;
		insert_space_before_opening_paren_in_new_arguments = false;
		insert_space_before_opening_paren_in_extern_declarations = false;
		insert_space_before_opening_paren_in_file_imports = false;
		insert_space_before_opening_paren_in_if_statements = false;
		insert_space_before_opening_paren_in_is_expressions = false;
		insert_space_before_opening_paren_in_casts = false;
		insert_space_before_opening_paren_in_template_declarations = false;
		insert_space_before_opening_paren_in_parenthesized_expressions = false;
		insert_space_before_opening_paren_in_type_dot_identifier_expression = false;
		insert_space_after_opening_paren_in_function_declaration_parameters = false;
		insert_space_after_opening_paren_in_function_template_args = false;
		insert_space_after_opening_paren_in_function_invocation = false;
		insert_space_after_opening_paren_in_catch = false;
		insert_space_after_opening_paren_in_for_loops = false;
		insert_space_after_opening_paren_in_while_loops = false;
		insert_space_after_opening_paren_in_foreach_loops = false;
		insert_space_after_opening_paren_in_out_declaration = false;
		insert_space_after_opening_paren_in_synchronized_statement = false;
		insert_space_after_opening_paren_in_switch_statements = false;
		insert_space_after_opening_paren_in_align_declarations = false;
		insert_space_after_opening_paren_in_class_template_params = false;
		insert_space_after_opening_paren_in_assert_statements = false;
		insert_space_after_opening_paren_in_version_debug = false;
		insert_space_after_opening_paren_in_mixins = false;
		insert_space_after_opening_paren_in_pragmas = false;
		insert_space_after_opening_paren_in_scope_statements = false;
		insert_space_after_opening_paren_in_with_statements = false;
		insert_space_after_opening_paren_in_typeof_statements = false;
		insert_space_after_opening_paren_in_typeid_statements = false;
		insert_space_after_opening_paren_in_delegate = false;
		insert_space_after_opening_paren_in_c_style_fp = false;
		insert_space_after_opening_paren_in_new_arguments = false;
		insert_space_after_opening_paren_in_extern_declarations = false;
		insert_space_after_opening_paren_in_file_imports = false;
		insert_space_after_opening_paren_in_if_statements = false;
		insert_space_after_opening_paren_in_is_expressions = false;
		insert_space_after_opening_paren_in_casts = false;
		insert_space_after_opening_paren_in_template_declarations = false;
		insert_space_after_opening_paren_in_parenthesized_expressions = false;
		insert_space_after_opening_paren_in_template_invocation = false;
		insert_space_after_opening_paren_in_type_dot_identifier_expression = false;
		insert_space_before_closing_paren_in_function_declaration_parameters = false;
		insert_space_before_closing_paren_in_function_template_args = false;
		insert_space_before_closing_paren_in_function_invocation = false;
		insert_space_before_closing_paren_in_catch = false;
		insert_space_before_closing_paren_in_for_loops = false;
		insert_space_before_closing_paren_in_while_loops = false;
		insert_space_before_closing_paren_in_foreach_loops = false;
		insert_space_before_closing_paren_in_out_declaration = false;
		insert_space_before_closing_paren_in_synchronized_statement = false;
		insert_space_before_closing_paren_in_switch_statements = false;
		insert_space_before_closing_paren_in_align_declarations = false;
		insert_space_before_closing_paren_in_class_template_params = false;
		insert_space_before_closing_paren_in_assert_statements = false;
		insert_space_before_closing_paren_in_version_debug = false;
		insert_space_before_closing_paren_in_mixins = false;
		insert_space_before_closing_paren_in_pragmas = false;
		insert_space_before_closing_paren_in_scope_statements = false;
		insert_space_before_closing_paren_in_with_statements = false;
		insert_space_before_closing_paren_in_typeof_statements = false;
		insert_space_before_closing_paren_in_typeid_statements = false;
		insert_space_before_closing_paren_in_delegate = false;
		insert_space_before_closing_paren_in_c_style_fp = false;
		insert_space_before_closing_paren_in_new_arguments = false;
		insert_space_before_closing_paren_in_extern_declarations = false;
		insert_space_before_closing_paren_in_file_imports = false;
		insert_space_before_closing_paren_in_if_statements = false;
		insert_space_before_closing_paren_in_is_expressions = false;
		insert_space_before_closing_paren_in_casts = false;
		insert_space_before_closing_paren_in_template_declarations = false;
		insert_space_before_closing_paren_in_parenthesized_expressions = false;
		insert_space_before_closing_paren_in_template_invocation = false;
		insert_space_before_closing_paren_in_type_dot_identifier_expression = false;
		insert_space_between_empty_parens_in_function_declaration_parameters = false;
		insert_space_between_empty_parens_in_function_template_args = false;
		insert_space_between_empty_parens_in_function_invocation = false;
		insert_space_between_empty_parens_in_out_declaration = false;
		insert_space_between_empty_parens_in_class_template_params = false;
		insert_space_between_empty_parens_in_delegate = false;
		insert_space_between_empty_parens_in_new_arguments = false;
		insert_space_between_empty_parens_in_extern_declarations = false;
		insert_space_between_empty_parens_in_template_declarations = false;
		insert_space_between_empty_parens_in_template_invocation = false;
		insert_space_between_name_and_args_in_c_style_fp = false;
		insert_space_between_template_and_arg_parens_in_function_declaration = false;
		insert_space_between_template_args_and_function_args = false;
		insert_space_between_succesive_opcalls = false;
		insert_space_before_comma_in_base_class_lists = false;
		insert_space_before_comma_in_array_literal = false;
		insert_space_before_comma_in_function_invocation_arguments = false;
		insert_space_before_comma_in_function_declaration_parameters = false;
		insert_space_before_comma_in_function_template_parameters = false;
		insert_space_before_comma_in_aggregate_template_parameters = false;
		insert_space_before_comma_in_foreach_statement = false;
		insert_space_before_comma_in_multiple_imports = false;
		insert_space_before_comma_in_selective_imports = false;
		insert_space_before_comma_in_pragmas = false;
		insert_space_before_comma_in_struct_initializer = false;
		insert_space_before_comma_in_template_declaration = false;
		insert_space_before_comma_in_template_invocation = false;
		insert_space_before_comma_in_multiple_field_declarations = false;
		insert_space_before_comma_in_array_access = false;
		insert_space_before_comma_in_delegates = false;
		insert_space_before_comma_in_new_arguments = false;
		insert_space_before_trailing_comma_in_array_initializer = false;
		insert_space_before_comma_in_assert_statements = false;
		insert_space_after_comma_in_base_class_lists = true;
		insert_space_after_comma_in_array_literal = true;
		insert_space_after_comma_in_function_invocation_arguments = true;
		insert_space_after_comma_in_function_declaration_parameters = true;
		insert_space_after_comma_in_function_template_parameters = true;
		insert_space_after_comma_in_aggregate_template_parameters = true;
		insert_space_after_comma_in_foreach_statement = true;
		insert_space_after_comma_in_multiple_imports = true;
		insert_space_after_comma_in_selective_imports = true;
		insert_space_after_comma_in_pragmas = true;
		insert_space_after_comma_in_struct_initializer = true;
		insert_space_after_comma_in_template_declaration = true;
		insert_space_after_comma_in_template_invocation = true;
		insert_space_after_comma_in_multiple_field_declarations = true;
		insert_space_after_comma_in_array_access = true;
		insert_space_after_comma_in_delegates = true;
		insert_space_after_comma_in_new_arguments = true;
		insert_space_after_trailing_comma_in_array_initializer = true;
		insert_space_after_comma_in_assert_statements = true;
		insert_space_before_assignment_operator = true;
		insert_space_before_prefix_operator = false;
		insert_space_before_infix_operator = true;
		insert_space_before_postfix_operator = false;
		insert_space_after_assignment_operator = true;
		insert_space_after_prefix_operator = false;
		insert_space_after_infix_operator = true;
		insert_space_after_postfix_operator = false;
		insert_space_before_exclamation_point_in_template_invocation = false;
		insert_space_after_exclamation_point_in_template_invocation = false;
		insert_space_after_closing_paren_in_casts = true;
		insert_space_before_dot_in_qualified_names = false;
		insert_space_before_dot_in_type_dot_identifier_expressions = false;
		insert_space_after_dot_in_qualified_names = false;
		insert_space_after_dot_in_type_dot_identifier_expressions = false;
		insert_space_before_slice_operator = true;
		insert_space_after_slice_operator = true;
		insert_space_before_elipsis_in_function_varargs = false;
		insert_space_before_elipsis_in_tuples = false;
		insert_space_after_elipsis_in_function_varargs = false;
		insert_space_after_elipsis_in_tuples = false;
		insert_space_between_empty_brackets_in_slice = false;
		insert_space_between_empty_brackets_in_dynamic_array_type = false;
		insert_space_between_adjacent_brackets_in_multidimensional_arrays = false;
		insert_space_before_colon_in_base_class_lists = false;
		insert_space_before_colon_in_template_specific_type = false;
		insert_space_before_colon_in_array_initializer = false;
		insert_space_before_colon_in_struct_initializer = false;
		insert_space_before_colon_in_case_default_statement = false;
		insert_space_before_colon_in_selective_imports = false;
		insert_space_before_colon_in_conditional_expressions = true;
		insert_space_before_colon_in_statement_labels = false;
		insert_space_before_colon_in_modifiers = false;
		insert_space_after_colon_in_base_class_lists = true;
		insert_space_after_colon_in_template_specific_type = true;
		insert_space_after_colon_in_array_initializer = true;
		insert_space_after_colon_in_struct_initializer = true;
		insert_space_after_colon_in_case_default_statement = true;
		insert_space_after_colon_in_selective_imports = true;
		insert_space_after_colon_in_conditional_expressions = true;
		insert_space_after_colon_in_statement_labels = true;
		insert_space_before_semicolon = false;
		insert_space_before_semicolon_in_for_statement = false;
		insert_space_before_semicolon_in_foreach_statement = false;
		insert_space_after_semicolon_in_foreach_statement = true;
		insert_space_after_semicolon_in_for_statement = true;
		insert_space_before_question_mark_in_conditional_expressions = true;
		insert_space_after_question_mark_in_conditional_expressions = true;
		blank_lines_before_module = 0;
		blank_lines_after_module = 1;
		number_of_empty_lines_to_preserve = 1;
		insert_new_line_before_else = false;
		insert_new_line_before_catch = false;
		insert_new_line_before_finally = false;
		insert_new_line_before_while_in_do_statement = false;
		insert_new_line_after_case_or_default_statement = true;
		insert_new_line_after_label = true;
		keep_else_conditional_on_one_line = true;
		insert_new_line_at_end_of_file_if_missing = false;
		keep_simple_then_declaration_on_same_line = false;
		keep_simple_else_declaration_on_same_line = false;
		keep_simple_then_statement_on_same_line = false;
		keep_simple_else_statement_on_same_line = false;
		keep_simple_try_statement_on_same_line = false;
		keep_simple_catch_statement_on_same_line = false;
		keep_simple_finally_statement_on_same_line = false;
		keep_simple_loop_statement_on_same_line = false;
		keep_simple_synchronized_statement_on_same_line = false;
		keep_simple_with_statement_on_same_line = false;
		keep_functions_with_no_statement_in_one_line = false;
		keep_functions_with_one_statement_in_one_line = false;
		indentation_size = 4;
		continuation_indentation = 2;
		indent_empty_lines = true;
		indent_body_declarations_compare_to_type_header = true;
		indent_body_declarations_compare_to_template_header = true;
		indent_body_declarations_compare_to_modifier_header = true;
		indent_statements_compare_to_function_header = true;
		indent_in_out_body_compare_to_function_header = false;
		indent_statements_compare_to_function_in_header = true;
		indent_statements_compare_to_function_out_header = true;
		indent_statements_compare_to_function_body_header = true;
		indent_enum_members_compare_to_enum_header = true;
		indent_cases_compare_to_switch = true;
		indent_break_compare_to_switch = false;
		indent_statements_compare_to_case = true;
		tab_char = TabChar.TAB;
		tab_size = 4;
		use_tabs_only_for_leading_indentations = false;
		never_indent_block_comments_on_first_column = false;
		never_indent_line_comments_on_first_column = false;
		line_split = 9999;
		page_width = 80;
	}
}
