This document explains the signature of types and symbols in Descent.

 * Signatures for primitive types remain the same.
 * For symbols:
     - For modules, the symbol @ is used: @4some6module
     - For classes, the letter C is used: C3Foo
     - For structs, the letter S is used: S3Foo
     - For interfaces, the symbol $ is used: $3Foo
     - For unions, the symbol & is used: &3Foo
     - For enums, the symbol E is used: E3Foo
     - For enum members, the symbol ~ is used: ~3Foo
     - For variables, the symbol / is used: /3Foo
     - For aliases, the symbol = is used: =3Foo
     - For typedefs, the letter T is used: T3Foo
     - For functions, the symbol [ is used, followed by the TypeFunction
       signature: [3fooFZv

For example:

 @4test3fooC3Bar --> class Bar in module test.foo
 @4test[3fooF@4testC3BarZv --> function foo in module test,
 	taking class Bar in module test as the first argument, and returning
 	void
 @test[3fooFZvCBar --> class Bar in function foo in module test

For local variables, it's the signature of the containing function followed
by #, numbers and the name of the variable. For example:

  ...#/x   --> variable x declared in the function
  ...#0#/x --> variable x declared in the first scope block of the function