package descent.internal.compiler.parser;

public interface Id {
	
	Identifier IUnknown = new Identifier("IUnknown");
	Identifier Object = new Identifier("Object");
	Identifier object = new Identifier("object");
	Identifier max = new Identifier("max");
	Identifier min = new Identifier("min");
	Identifier This = new Identifier("this");
	Identifier ctor = new Identifier("_ctor");
	Identifier dtor = new Identifier("_dtor");
	Identifier classInvariant = new Identifier("__invariant");
	Identifier unitTest = new Identifier("_unitTest");
	Identifier staticCtor = new Identifier("_staticCtor");
	Identifier staticDtor = new Identifier("_staticDtor");
	Identifier init = new Identifier("init");
	Identifier size = new Identifier("size");
	Identifier __sizeof = new Identifier("sizeof");
	Identifier alignof = new Identifier("alignof");
	Identifier mangleof = new Identifier("mangleof");
	Identifier stringof = new Identifier("stringof");
	Identifier length = new Identifier("length");
	Identifier remove = new Identifier("remove");
	Identifier ptr = new Identifier("ptr");
	Identifier dollar = new Identifier("__dollar");
	Identifier offset = new Identifier("offset");
	Identifier offsetof = new Identifier("offsetof");
	Identifier ModuleInfo = new Identifier("ModuleInfo");
	Identifier ClassInfo = new Identifier("ClassInfo");
	Identifier classinfo = new Identifier("classinfo");
	Identifier typeinfo = new Identifier("typeinfo");
	Identifier Exception = new Identifier("Exception");
	Identifier withSym = new Identifier("__withSym");
	Identifier result = new Identifier("__result");
	Identifier returnLabel = new Identifier("__returnLabel");
	Identifier _delegate = new Identifier("delegate");
	Identifier line = new Identifier("line");
	Identifier empty = new Identifier("");
	Identifier p = new Identifier("p");
	Identifier coverage = new Identifier("__coverage");
	Identifier TypeInfo = new Identifier("TypeInfo");
	Identifier TypeInfo_Class = new Identifier("TypeInfo_Class");
	Identifier TypeInfo_Struct = new Identifier("TypeInfo_Struct");
	Identifier TypeInfo_Interface = new Identifier("TypeInfo_Interface");
	Identifier TypeInfo_Enum = new Identifier("TypeInfo_Enum");
	Identifier TypeInfo_Typedef = new Identifier("TypeInfo_Typedef");
	Identifier TypeInfo_Pointer = new Identifier("TypeInfo_Pointer");
	Identifier TypeInfo_Array = new Identifier("TypeInfo_Array");
	Identifier TypeInfo_StaticArray = new Identifier("TypeInfo_StaticArray");
	Identifier TypeInfo_AssociativeArray = new Identifier("TypeInfo_AssociativeArray");
	Identifier TypeInfo_Function = new Identifier("TypeInfo_Function");
	Identifier TypeInfo_Delegate = new Identifier("TypeInfo_Delegate");
	Identifier TypeInfo_Tuple = new Identifier("TypeInfo_Tuple");
	Identifier _arguments = new Identifier("_arguments");
	Identifier _argptr = new Identifier("_argptr");
	Identifier _match = new Identifier("_match");
	Identifier LINE = new Identifier("__LINE__");
	Identifier FILE = new Identifier("__FILE__");
	Identifier DATE = new Identifier("__DATE__");
	Identifier TIME = new Identifier("__TIME__");
	Identifier TIMESTAMP = new Identifier("__TIMESTAMP__");
	Identifier nan = new Identifier("nan");
	Identifier infinity = new Identifier("infinity");
	Identifier dig = new Identifier("dig");
	Identifier epsilon = new Identifier("epsilon");
	Identifier mant_dig = new Identifier("mant_dig");
	Identifier max_10_exp = new Identifier("max_10_exp");
	Identifier max_exp = new Identifier("max_exp");
	Identifier min_10_exp = new Identifier("min_10_exp");
	Identifier min_exp = new Identifier("min_exp");
	Identifier re = new Identifier("re");
	Identifier im = new Identifier("im");
	Identifier C = new Identifier("C");
	Identifier D = new Identifier("D");
	Identifier Windows = new Identifier("Windows");
	Identifier Pascal = new Identifier("Pascal");
	Identifier exit = new Identifier("exit");
	Identifier success = new Identifier("success");
	Identifier failure = new Identifier("failure");
	Identifier keys = new Identifier("keys");
	Identifier values = new Identifier("values");
	Identifier rehash = new Identifier("rehash");
	Identifier sort = new Identifier("sort");
	Identifier reverse = new Identifier("reverse");
	Identifier dup = new Identifier("dup");
	Identifier ___out = new Identifier("out");
	Identifier ___in = new Identifier("in");
	Identifier __int = new Identifier("int");
	Identifier __dollar = new Identifier("$");
	Identifier __LOCAL_SIZE = new Identifier("__LOCAL_SIZE");
	Identifier uadd = new Identifier("opPos");
	Identifier neg = new Identifier("opNeg");
	Identifier com = new Identifier("opCom");
	Identifier add = new Identifier("opAdd");
	Identifier add_r = new Identifier("opAdd_r");
	Identifier sub = new Identifier("opSub");
	Identifier sub_r = new Identifier("opSub_r");
	Identifier mul = new Identifier("opMul");
	Identifier mul_r = new Identifier("opMul_r");
	Identifier div = new Identifier("opDiv");
	Identifier div_r = new Identifier("opDiv_r");
	Identifier mod = new Identifier("opMod");
	Identifier mod_r = new Identifier("opMod_r");
	Identifier eq = new Identifier("opEquals");
	Identifier cmp = new Identifier("opCmp");
	Identifier iand = new Identifier("opAnd");
	Identifier iand_r = new Identifier("opAnd_r");
	Identifier ior = new Identifier("opOr");
	Identifier ior_r = new Identifier("opOr_r");
	Identifier ixor = new Identifier("opXor");
	Identifier ixor_r = new Identifier("opXor_r");
	Identifier shl = new Identifier("opShl");
	Identifier shl_r = new Identifier("opShl_r");
	Identifier shr = new Identifier("opShr");
	Identifier shr_r = new Identifier("opShr_r");
	Identifier ushr = new Identifier("opUShr");
	Identifier ushr_r = new Identifier("opUShr_r");
	Identifier cat = new Identifier("opCat");
	Identifier cat_r = new Identifier("opCat_r");
	Identifier assign = new Identifier("opAssign");
	Identifier addass = new Identifier("opAddAssign");
	Identifier subass = new Identifier("opSubAssign");
	Identifier mulass = new Identifier("opMulAssign");
	Identifier divass = new Identifier("opDivAssign");
	Identifier modass = new Identifier("opModAssign");
	Identifier andass = new Identifier("opAndAssign");
	Identifier orass = new Identifier("opOrAssign");
	Identifier xorass = new Identifier("opXorAssign");
	Identifier shlass = new Identifier("opShlAssign");
	Identifier shrass = new Identifier("opShrAssign");
	Identifier ushrass = new Identifier("opUShrAssign");
	Identifier catass = new Identifier("opCatAssign");
	Identifier postinc = new Identifier("opPostInc");
	Identifier postdec = new Identifier("opPostDec");
	Identifier index = new Identifier("opIndex");
	Identifier indexass = new Identifier("opIndexAssign");
	Identifier slice = new Identifier("opSlice");
	Identifier sliceass = new Identifier("opSliceAssign");
	Identifier call = new Identifier("opCall");
	Identifier _cast = new Identifier("opCast");
	Identifier match = new Identifier("opMatch");
	Identifier next = new Identifier("opNext");
	Identifier opIn = new Identifier("opIn");
	Identifier opIn_r = new Identifier("opIn_r");
	Identifier classNew = new Identifier("new");
	Identifier classDelete = new Identifier("delete");
	Identifier apply = new Identifier("opApply");
	Identifier applyReverse = new Identifier("opApplyReverse");
	Identifier lib = new Identifier("lib");
	Identifier msg = new Identifier("msg");
	Identifier GNU_asm = new Identifier("GNU_asm");
	Identifier tohash = new Identifier("toHash");
	Identifier alloca = new Identifier("alloca");
	Identifier main = new Identifier("main");
	Identifier WinMain = new Identifier("WinMain");
	Identifier DllMain = new Identifier("DllMain");
	Identifier toIdentifier = new Identifier("toIdentifier");
	Identifier _arguments_typeinfo = new Identifier("_arguments_typeinfo");
	Identifier elements = new Identifier("elements");
	Identifier outer = new Identifier("outer");

}
