/**
 * Summary:
 * Supports unittest naming. Names generated through this will appear in the binary
 * and thus will be accessible to tools such as Flute which need to access test
 * names at runtime.
 * 
 * Usage:
 * To add a name to a test, import org.dsource.descent.unittests.naming
 * and insert use "mixin(test_name($(I test name)));" somewhere in your test body.
 * For example:
 * ---
 * module bacon.eggs;
 * import org.dsource.descent.unittests.naming;
 * 
 * class Sausage {
 *     unittest {
 *         mixin(test_name("spam"));
 *         // ...
 *     }
 * }
 * ---
 * Right now, test names must form valid D idntifiers. This makes everything a bit
 * more sane from an implementation perspective, but this restriction may be lifted
 * in a future version. If a test name does not form a valid D identifier, the test
 * name will not be inserted into the test.
 * 
 * Behavior if a test is given multiple names is undefined by this module, but should
 * be considered as an error condition by tools accessing the names, such as flute
 * and descent.unittest.
 * 
 * To access the test names, RTTI will need to be somehow visited; see Flute for
 * an example of how test names can be accessed using Flectioned.
 * 
 * Limitations:
 * This module has only been tested in D version 1. Version 2.x support will be added
 * in a future version, but it may work fine for D2 as it is.
 * 
 * Authors:
 * Robert Fraser (fraserofthenight@gmail.com)
 * 
 * Copyright:
 * 2007 Robert Fraser (fraserofthenight@gmail.com)
 * 
 * Version:
 * Almost 0.1
 * 
 * License:
 * Copyright (c) $(COPYRIGHT)
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at 
 * $(LINK http://www.eclipse.org/legal/epl-v10.html)
 */
module org.dsource.descent.unittests.naming;

/*
 * Implemenatation notes:
 * - This should be 100% decoupled from Flute, Descent & Flectioned
 * - Everything should be 100% executable at compile-time; no runtime code should
 *   be generated by anything in this module.
 */

/**
 * Generates a mixin-able string for naming a test.
 * 
 * Params:
 *     name = The name of the test; must form a valid D identifier
 * Returns: A code string that, when mixed into a unittest, will name the test.
 */
public char[] test_name(char[] name)
{
	// TODO Ensure the name forms a valid D identifier including universial alpha
	foreach(c; name)
	{
		//if(!(c == '_' || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ||
		//		(c >= '0' && c <= '9')))
		if(false)
		{
			return "pragma(msg, \"Unittest identifier " ~ name ~ " in __FILE__ "
					"at line __LINE__ does not form a valid D identifier.\");";
		}
	}
	
	return "byte __testName_" ~ name ~ ";"
	       "static assert(is(typeof(__setTestName!(__testName_" ~ name ~ ").a)));";
}

public class __setTestName(alias name)
{
   static typedef typeof(this) a;
} 
